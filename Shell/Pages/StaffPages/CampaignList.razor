@page "/campaignlist"

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />
@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
    <br />
    <br />
    <center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/config.png" alt="" />ข้อมูลแต้มสินค้า</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">รายการแคมเปญแต้มสินค้า</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="row">
                                        <div class="col-md-6 rows">
                                            <div class="datepicker input-daterange input-group">
                                                <span class="input-group-addon first-text">จาก - ถึง<i class="fa fa-calendar ifrom" aria-hidden="true"></i></span>
                                                <DateRangePicker class="form-control" @bind-StartDate="InputStartDate" @bind-EndDate="InputEndDate" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="status" class="form-control" @bind="statusSelected">
                                                    <option Value="active">active</option>
                                                    <option Value="inactive">inactive</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 rows">
                                            <div class="input-group">
                                                <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="field_select" class="form-control" @bind="field_selected">
                                                    <option Value="CampaignCode">รหัสแคมเปญ</option>
                                                    <option Value="CampaignName">ชื่อแคมเปญ</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row search">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='campaignlist';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (hplExport_Visible)
                        {
                            <a id="hplExport" class="btn btn-default" @onclick="btnExport_Click"><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</a>
                            @:&nbsp;&nbsp;&nbsp;
                            <button id="btnExport" @onclick="btnExport_Click" class="hidden">นำข้อมูลออก</button>
                        }
                        @if (btnCreate_Visible)
                        {
                            <a id="btnCreate"
                       href="campaignedit?keyword=@(SearchTxt)&field=@(field_selected)&status=@(statusSelected)&start=@(InputStartDate.HasValue ? InputStartDate.Value.Date.ToString() : "")&end=@(InputEndDate.HasValue ? InputEndDate.Value.Date.ToString() : "")&act=add&id=">
                                <img src="Resource/img/icon-add.png" class="icon-img">
                            </a>
                        }
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="20%">รหัสแคมเปญ</th>
                                    <th width="30%">ชื่อแคมเปญ</th>
                                    <th width="15%">วันที่เริ่มต้น</th>
                                    <th width="15%">วันที่สิ้นสุด</th>
                                    <th width="10%">สถานะ</th>
                                    <th width="10%">คำสั่ง</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var each_data in searchDataPaged)
                                {
                                    <tr>
                                        <td align="center">
                                            <a href="campaignedit?keyword=@(SearchTxt)&field=@(field_selected)&status=@(statusSelected)&start=@(InputStartDate.HasValue ? InputStartDate.Value.Date.ToString() : "")&end=@(InputEndDate.HasValue ? InputEndDate.Value.Date.ToString() : "")&act=view&id=@each_data.CampaignCode">
                                                @each_data.CampaignCode
                                            </a>
                                        </td>
                                        <td>@each_data.CampaignName</td>
                                        <td>@each_data.StartDate</td>
                                        <td>@each_data.EndDate</td>
                                        <td align="center"><span style="color:Blue;">@each_data.Status</span></td>
                                        <td align="center">
                                            <a href="campaignedit?keyword=@(SearchTxt)&field=@(field_selected)&status=@(statusSelected)&start=@(InputStartDate.HasValue ? InputStartDate.Value.Date.ToString() : "")&end=@(InputEndDate.HasValue ? InputEndDate.Value.Date.ToString() : "")&act=edit&id=@each_data.CampaignCode">
                                                <img src="Resource/img/edit.png" class="icon-img">
                                            </a>
                                        </td>
                                    </tr>
                                }
                                @if (IsEmpty)
                                {
                                    <tr><td align='center' colspan='6'><b>ไม่มีข้อมูล</b></td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}



@code {
    public DateTimeOffset? InputStartDate { get; set; }
    public DateTimeOffset? InputEndDate { get; set; }
    //PARAM
    [Parameter]
    [SupplyParameterFromQuery]
    public string? keyword { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? field { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? start { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? end { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? status { get; set; }

    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;

    public List<CampaignListSearchData> searchData_iquery = new List<CampaignListSearchData>();
    public List<CampaignListSearchData> searchDataPaged = new List<CampaignListSearchData>();

    public bool IsEmpty = false;
    //html input
    public string? SearchTxt;
    public string? field_selected = "CampaignCode";
    public string statusSelected = "active";

    //html visible disable
    public bool btnCreate_Visible = false;
    public bool hplExport_Visible = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();

            this.pageSize = int.Parse(configuration["PageSize"]);

            if (!string.IsNullOrWhiteSpace(keyword))
                SearchTxt = keyword;
            if (!string.IsNullOrWhiteSpace(field))
                field_selected = field;
            if (!string.IsNullOrWhiteSpace(start))
                InputStartDate = DateTimeOffset.ParseExact(start, "dd/MM/yyyy", null);
            if (!string.IsNullOrWhiteSpace(end))
                InputEndDate = DateTimeOffset.ParseExact(end, "dd/MM/yyyy", null);
            if (!string.IsNullOrWhiteSpace(status))
                statusSelected = status;

            btnSearch_Click();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("3");
        int chk_authorize2 = await secure.Check_Document_Authorize("6", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
            int Create_Per = await secure.Check_Document_Authorize("6", "1");
            if (Create_Per == 1)
            {
                btnCreate_Visible = true;
            }
            int Export_Per = await secure.Check_Document_Authorize("6", "7");
            if (Export_Per == 1)
            {
                hplExport_Visible = true;
            }

        }
    }

    IEnumerable<CampaignListSearchData> QuerySearch(SHELLREGContext db)
    {
        var query = (
            from cam in db.Campaigns.Where(t1 => !string.IsNullOrWhiteSpace(t1.CampaignCode))

            select new CampaignListSearchData()
                {
                    CampaignCode = cam.CampaignCode,
                    CampaignName = cam.CampaignName,
                    StartDate = cam.StartDate,
                    EndDate = cam.EndDate,
                    Status = cam.Status,
                }
        );
        return query.AsEnumerable();
    }

    IEnumerable<CampaignListSearchData> Specify(IEnumerable<CampaignListSearchData> query)
    {
        var filtered = query;
        if (!string.IsNullOrWhiteSpace(SearchTxt))
        {
            switch (field_selected)
            {
                case "CampaignCode":
                    {
                        filtered = filtered.Where(t => t.CampaignCode.Contains(SearchTxt));
                        break;
                    }
                case "CampaignName":
                    {
                        filtered = filtered.Where(t => t.CampaignName.Contains(SearchTxt));
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }
        if (!string.IsNullOrWhiteSpace(statusSelected))
        {
            filtered = filtered.Where(t => t.Status.Contains(statusSelected));
        }
        if (InputStartDate != null)
        {
            filtered = filtered.Where(t => !string.IsNullOrWhiteSpace(t.StartDate));
            filtered = filtered.Where(t => DateTimeOffset.ParseExact(t.StartDate, "dd/MM/yyyy", null) >= InputStartDate.Value.Date);
        }
        if (InputEndDate != null)
        {
            filtered = filtered.Where(t => !string.IsNullOrWhiteSpace(t.EndDate));
            filtered = filtered.Where(t => DateTimeOffset.ParseExact(t.EndDate, "dd/MM/yyyy", null) <= InputEndDate.Value.Date);
        }
        return filtered;
    }

    void SetData(IEnumerable<CampaignListSearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void btnSearch_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
            if(filtered.Any()){
                IsEmpty = false;
            }
            else
            {
                IsEmpty = true;
            }
            StateHasChanged();
        }
    }


    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    async Task btnExport_Click()
    {
            var xls = new Excel();
            var tts = new List<ProductPointExcelData>();

                        	//MENGGIEUNDONE


            //tts.Add(new ProductPointExcelData());
            await xls.GenerateProductPointExcelImportDataAsync(js,tts , "export.xlsx");
    }
}
