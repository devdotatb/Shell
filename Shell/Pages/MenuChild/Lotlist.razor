@page "/lotlist"

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />
@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
    <br />
    <br />
    <center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/report.png" alt="" />Lot การนำข้อมูลสั่งซื้อออก</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">รายการ Lot No.</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-6 rows">
                                    <div class="datepicker input-daterange input-group">
                                        <span class="input-group-addon first-text">จาก - ถึง<i class="fa fa-calendar ifrom" aria-hidden="true"></i></span>
                                        <DateRangePicker class="form-control" @bind-StartDate="InputStartDate" @bind-EndDate="InputEndDate" />
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="dealerSelected">
                                            <option Value="">ชื่อร้านค้า</option>
                                            @foreach (var each in ShopList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="invStatSelected">
                                            <option Value="">สถานะรายการสั่งซื้อ</option>
                                            @foreach (var each in InvoiceStatusList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="field_selected">
                                            <option Value="InvoiceHeader.InvoiceNo">เลขที่รายการสั่งซื้อ</option>
                                            <option Value="TradeOwner.ACode">A-Code</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="lotnoSelected">
                                            <option Value="">Lot No.</option>
                                            <option Value="0">ยังไม่ได้ Gen Lot No.</option>
                                            @foreach (var each in LotNoList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                        @*<asp:DropDownList id="lotno" class="form-control" />*@
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='lotlist';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (divsuccess_Visible)
            {
                <div id="divsuccess" class="alert alert-success" role="alert">@lblSuccess</div>
            }
            @if (diverror_Visible)
            {
                <div id="diverror" class="alert alert-danger" role="alert">@lblMsg</div>
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (hplExport_Visible)
                        {
                            <a id="hplExport" class="btn btn-default" @onclick=OpenExportModal><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</a>
                        }
                        @if (hplGenlot_Visible)
                        {
                            <a id="hplGenlot" class="btn btn-success" @onclick=OpenGenLotModal>Gen Lot No.</a>
                        }
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="8%">เลขที่รายการสั่งซื้อ</th>
                                    <th width="8%">วันที่สั่งซื้อ</th>
                                    <th width="8%">เขต</th>
                                    <th width="8%">A-CODE</th>
                                    <th width="23%">ชื่อร้านค้า</th>
                                    <th width="8%">CustShopType</th>
                                    <th width="5%">แต้มรวม</th>
                                    <th width="10%">สถานะรายการสั่งซื้อ</th>
                                    <th width="8%">Lot No.</th>
                                    <th width="8%">วันที่ Lot No.</th>
                                    <th width="6%">OrderID</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var eachitem in searchDataPaged)
                                {
                                    <tr>
                                        <td align="center">@eachitem.InvoiceNo</td>
                                        <td align="center">@eachitem.InvoiceDate</td>
                                        <td align="center">@eachitem.Site</td>
                                        <td align="center">@eachitem.ACode</td>
                                        <td>@eachitem.ShopName</td>
                                        <td align="center">@eachitem.CustShopType</td>
                                        <td align="center">@eachitem.Point</td>
                                        <td align="center">@eachitem.InvoiceStatusName</td>
                                        <td align="center">@eachitem.LotNo</td>
                                        <td align="center">@eachitem.LotDate</td>
                                        <td align="center">@eachitem.OrderID</td>
                                    </tr>
                                }
                                @IsEmpty
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}

@inject IJSRuntime js
@inject ISecure secure
@inject IPopulate pop
@inject IclsDefault my_clsDefault
@inject IConfigSystem consys
@inject Blazored.LocalStorage.ILocalStorageService _sessionStorage
@inject NavigationManager Navigation
@using BlazorDateRangePicker
@using Nancy.Json
@using Newtonsoft.Json.Linq
@using Shell.Data
@using Shell.Data.ExcelData
@using Shell.Data.SearchData
@using Shell.Model
@using Shell.Service

@code {
    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;

    public List<LotListSeachData> searchData_iquery = new List<LotListSeachData>();
    public List<LotListSeachData> searchDataPaged = new List<LotListSeachData>();

    //html list
    public List<ListItem> ShopList = new List<ListItem>();
    public List<ListItem> InvoiceStatusList = new List<ListItem>();
    public List<ListItem> LotNoList = new List<ListItem>();

    //html input
    public DateTimeOffset? InputStartDate { get; set; }
    public DateTimeOffset? InputEndDate { get; set; }
    public string SearchTxt { get; set; }
    public string field_selected { get; set; } = "InvoiceHeader.InvoiceNo";
    public string dealerSelected { get; set; }
    public string invStatSelected { get; set; }
    public string? lotnoSelected { get; set; }

    //html visible disable
    public bool divsuccess_Visible = false;
    public bool diverror_Visible = false;
    public bool hplExport_Visible = false;
    public bool hplGenlot_Visible = false;

    //html text
    public string lblSuccess;
    public string lblMsg;
    public int ViewState_Total;
    public string IsEmpty;

    // session
    public string session_userid;
    public string session_position;

    string keywords = "";
    string jsondata = "", content = "";
    string curr_date = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year;
    string curr_time = DateTime.Now.ToString("HH:mm:ss");
    string curr_times = DateTime.Now.ToString("HH:mm");
    string curr_date_full = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year + " " + DateTime.Now.ToString("HH:mm:ss");


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            session_userid = await _sessionStorage.GetItemAsync<string>("UserID");
            session_position = await _sessionStorage.GetItemAsync<string>("Position");
            ShopList = pop.DropDownDealerInvoice(session_position, session_userid);
            InvoiceStatusList = pop.DropDownInvoiceStatus();
            LotNoList = pop.DropDownLotNo();

            using (var db = new SHELLREGContext())
            {
                var query = this.QuerySearch(db);
                var filtered = this.Specify(query);
                this.SetData(filtered);
            }
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("2");
        int chk_authorize2 = await secure.Check_Document_Authorize("3", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
        }
    }

    async void btnSearch_Click()
    {

        hplExport_Visible = false;
        if (!string.IsNullOrWhiteSpace(invStatSelected))
        {
            if (invStatSelected == "3")
            {
                int Export_Per = await secure.Check_Document_Authorize("3", "7");
                if (Export_Per == 1)
                {
                    hplExport_Visible = true;
                }
            }
        }
        hplGenlot_Visible = false;
        if (!string.IsNullOrWhiteSpace(lotnoSelected))
        {
            if (lotnoSelected != "0")
            {
            }
            else
            {
                if (invStatSelected == "2")
                {
                    int Create_Per = await secure.Check_Document_Authorize("3", "1");
                    if (Create_Per == 1)
                    {
                        hplGenlot_Visible = true;
                    }
                }
            }
        }
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
        }
    }

    IEnumerable<LotListSeachData> QuerySearch(SHELLREGContext db)
    {
        var q_group = (
            from InvDet in db.InvoiceDetails.Where(t => t.Deleted == false)
            group InvDet.ProductQty by new { InvDet.InvoiceNo }
            into g
            select new { InvoiceNo = g.Key.InvoiceNo, ProductQty = g.Sum() }
        );
        var query = (
            from InvHead in db.InvoiceHeaders.Where(t => !string.IsNullOrWhiteSpace(t.InvoiceNo))
            from InvStat in db.InvoiceStatuses.Where(t => InvHead.InvoiceStatusId == t.InvoiceStatusId)
            from TrdOwn in db.TradeOwners.Where(t => InvHead.Acode == t.Acode)
            from Lots in db.Lots.Where(t => InvHead.LotNo == t.LotNo).DefaultIfEmpty()
            from ggrouped in q_group.Where(t => InvHead.InvoiceNo == t.InvoiceNo).DefaultIfEmpty()

            select new LotListSeachData()
                {
                    InvoiceNo = InvHead.InvoiceNo,
                    InvoiceDate = InvHead.InvoiceDate,
                    InvoiceDate_Datetime = DateTimeOffset.ParseExact(InvHead.InvoiceDate, "dd/MM/yyyy", null),
                    InvoiceStatusID = InvStat.InvoiceStatusId,
                    InvoiceStatusName = InvStat.InvoiceStatusName,
                    EditDate = InvHead.EditDate,
                    ACode = TrdOwn.Acode,
                    ShopName = TrdOwn.ShopName,
                    Site = TrdOwn.Site,
                    LotNo = Lots.LotNo,
                    LotDate = Lots.LotDate,
                    Point = ggrouped.ProductQty,
                    CustShopType = TrdOwn.CustShopType,
                    DSMID = TrdOwn.Dsmid,
                    DSRID = TrdOwn.Dsrid,
                    OBAMID = TrdOwn.Obamid,
                }
        );
        return query.AsEnumerable();
    }

    IEnumerable<LotListSeachData> Specify(IEnumerable<LotListSeachData> query)
    {
        var filtered = query;
        if (!string.IsNullOrWhiteSpace(SearchTxt))
        {
            switch (field_selected)
            {
                case "InvoiceHeader.InvoiceNo":
                    {
                        filtered = filtered.Where(t => t.InvoiceNo.Contains(SearchTxt));
                        break;
                    }
                case "TradeOwner.ACode":
                    {
                        filtered = filtered.Where(t => t.ACode.Contains(SearchTxt));
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }
        if (!string.IsNullOrWhiteSpace(dealerSelected))
        {
            filtered = filtered.Where(t => t.ACode == dealerSelected);
        }
        if (!string.IsNullOrWhiteSpace(invStatSelected))
        {
            filtered = filtered.Where(t => t.InvoiceStatusID == int.Parse(invStatSelected));
        }
        if (!string.IsNullOrWhiteSpace(lotnoSelected))
        {
            if (lotnoSelected != "0")
            {
                filtered = filtered.Where(t => t.LotNo == lotnoSelected);
            }
            else
            {
                filtered = filtered.Where(t => string.IsNullOrWhiteSpace(t.LotNo));
            }
        }
        if (InputStartDate != null)
        {
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date >= InputStartDate.Value.Date);
        }
        if (InputEndDate != null)
        {
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date <= InputEndDate.Value.Date);
        }
        return filtered;
    }

    void SetData(IEnumerable<LotListSeachData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
        ViewState_Total = searchData_iquery.Count();
        StateHasChanged();
    }

    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }
}

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}
@code {
    public bool ShowBackdrop = false;
}


<div class="modal @ExportModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@ExportModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@CloseExportModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div id="divexcel">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">&nbsp;</div>
                        <div class="col-md-8">
                            <div class="radio radio-success">
                                @if (rdoExportTxt_Visible)
                                {
                                    <input type="radio" id="" checked />
                                    @:excel file
                                }
                                @*<asp:RadioButton id="rdoExportTxt" Text="txt file" GroupName="export"  />*@
                            </div>
                            <div class="radio radio-success">
                                <input type="radio" id="" checked />excel file
                                @*<asp:RadioButton id="rdoExportExcel" Text="excel file" GroupName="export" Checked="true" />*@
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@CloseExportModal">ยกเลิก</button></div>
                        <div class="col-md-3"><button type="button" id="btnExport" @onclick=@btnExport_Click class="btn btn-success btn-block login-button">ตกลง</button></div>
                    </div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>

@code {
    public bool rdoExportTxt_Visible = false;
    public string ExportModalDisplay = "none;";
    public string ExportModalClass = "";
    private void OpenExportModal()
    {
        ExportModalDisplay = "block;";
        ExportModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseExportModal()
    {
        ExportModalDisplay = "none";
        ExportModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public void btnExport_Click()
    {

    }
}

<div class="modal @GenLotModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@GenLotModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@CloseGenLotModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div id="divgenlot">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 rows">
                            <div class="input-group text-center">
                                <label class="col-form-label">ต้องการ Gen Lot No. ทั้งหมด @ViewState_Total.ToString() รายการ ใช่หรือไม่?</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@CloseGenLotModal">ยกเลิก</button></div>
                        <div class="col-md-3"><button type="button" id="btnGenLot" @onclick=@btnGenLot_Click class="btn btn-success btn-block login-button">ตกลง</button></div>
                    </div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>
@code {

    public string GenLotModalDisplay = "none;";
    public string GenLotModalClass = "";
    private void OpenGenLotModal()
    {
        GenLotModalDisplay = "block;";
        GenLotModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseGenLotModal()
    {
        GenLotModalDisplay = "none";
        GenLotModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async void btnGenLot_Click()
    {
        string LotNo = await GetLotNo();
        using (var db = new SHELLREGContext())
        {
            using (var dbContextTransaction = db.Database.BeginTransaction())
            {
                try
                {
                    db.Lots.Add(new Lot()
                        {
                            LotNo = LotNo,
                            LotDate = curr_date,
                            LotTime = curr_time,
                            LotUserId = session_userid,
                        });
                    db.SaveChanges();

                    foreach (var each_q in searchData_iquery)
                    {
                        var finding = db.InvoiceHeaders.Where(t => t.InvoiceNo == each_q.InvoiceNo);
                        if (finding.Any())
                        {
                            var found = finding.First();
                            found.LotNo = LotNo;
                        }
                    }
                    db.SaveChanges();

                    var query_ = (
                        from invh in db.InvoiceHeaders.Where(t => t.LotNo == LotNo)
                        from invs in db.InvoiceStatuses.Where(t => t.InvoiceStatusId == invh.InvoiceStatusId)
                        from trd in db.TradeOwners.Where(t => t.Acode == invh.Acode)

                        select new
                        {
                            InvoiceNo = invh.InvoiceNo,
                            InvoiceStatusName = invs.InvoiceStatusName,
                            LineUID = trd.LineUid,
                            ACode = trd.Acode,
                            CustShopType = trd.CustShopType,
                            //UserShare = ,
                        }
                    ).ToList();

                    foreach (var each in query_)
                    {
                        if (each.LineUID != "")
                        {
                            keywords = "R-IbsQfjj";//Invoice_To_OBAM_Status
                            DataParams Params = new DataParams();
                            Params.invoice = each.InvoiceNo;
                            Params.adddate = curr_date;
                            Params.addtime = curr_times;
                            Params.status = each.InvoiceStatusName;

                            DataLines datas = new DataLines();
                            datas.to = each.LineUID;
                            datas.keyword_id = keywords;
                            datas.Params = Params;

                            jsondata = Newtonsoft.Json.JsonConvert.SerializeObject(datas).Replace("Params", "params");
                            try
                            {
                                content = my_clsDefault.LineDataReader(jsondata).ReadToEnd();
                                new LogSystemService().InsertLogSendLine("INVOICE GENLOT", "InvoiceEditTradeOwner", each.LineUID, jsondata, content);
                            }
                            catch (Exception)
                            {
                                new LogSystemService().InsertLogSendLine("ERROR INVOICE GENLOT", "InvoiceEditTradeOwner", each.LineUID, jsondata, "");
                            }
                        }

                        if (each.CustShopType == "SHARE")
                        {
                            Dictionary<string, string> header = new Dictionary<string, string>();
                            try
                            {
                                string access_token = consys.GetAccessToken();

                                List<DataOrderList> order_list = new List<DataOrderList>();
                                int linenum = 0;

                                var finding_invd = db.InvoiceDetails.Where(t => t.InvoiceNo == each.InvoiceNo && t.Deleted == false /*  && t.SHAREID != 0*/);
                                foreach (var each_founded in finding_invd)
                                {
                                    linenum += 10;
                                    DataOrderList order = new DataOrderList();
                                    //order.product_id = each_founded.SHAREID;
                                    order.product_name = "";
                                    order.line_number = linenum.ToString();
                                    order.qty = each_founded.ProductQty.ToString();
                                    order_list.Add(order);
                                }
                                jsondata = new JavaScriptSerializer().Serialize(new
                                {
                                    client_id = consys.Get_client_id(),
                                    //user_id = UserShare,
                                    workshop_shell_code = each.ACode,
                                    access_token = access_token,
                                    order_list = order_list
                                });

                                header.Add("ER-Token", consys.Get_ERToken());
                                header.Add("CountryCode", consys.Get_CountryCode());
                                header.Add("LanguageCode", consys.Get_LanguageCode());


                                if (finding_invd.Count() > 0)
                                {
                                    try
                                    {
                                        content = consys.ApiDataReader(jsondata, consys.Get_UrlApiEndPoint_addclientorders(), "POST", header).ReadToEnd();
                                        JObject rss = JObject.Parse(content);
                                        if (rss["ResponseCode"].ToString() == "5000")
                                        {
                                            string OrderID = rss["Data"]["order_id"].ToString();
                                            var findinggg = db.InvoiceHeaders.Where(t => t.InvoiceNo == each.InvoiceNo);
                                            if (findinggg.Any())
                                            {
                                                var foundeddd = findinggg.First();
                                                //foundeddd.OrderID = OrderID;
                                            }
                                            db.SaveChanges();
                                            InsertPointLog(LotNo, each.InvoiceNo, jsondata, content, "True");
                                        }
                                        else
                                        {
                                            InsertPointLog(LotNo, each.InvoiceNo, jsondata, content, "False");
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        InsertPointLog(LotNo, each.InvoiceNo, jsondata, content, "False");
                                    }
                                }
                            }
                            catch (Exception)
                            {
                                InsertPointLog(LotNo, each.InvoiceNo, "", "", "False");
                            }
                        }
                    }

                    dbContextTransaction.Commit();

                    divsuccess_Visible = true;
                    lblSuccess = "SUCCESS : Gen Lot No. เสร็จเรียบร้อย";
                    CloseGenLotModal();
                    btnSearch_Click();
                }
                catch (Exception ex)
                {
                    diverror_Visible = true;
                    lblMsg = "ERROR: " + ex.Message;
                }
            }
        }
    }


    private async Task<string> GetLotNo()
    {
        string LotNo = await my_clsDefault.GenLotNo();
        return LotNo;
    }

    private void InsertPointLog(string LotNo, string InvoiceNo, string JsonData, string ResponseData, string LogStatus)
    {
        /*using (var db = new SHELLREGContext())
        {
            db.LotsPointLog
        sql = string.Format("INSERT INTO LotsPointLog(LotNo, InvoiceNo, JsonData, ResponseData, LogDate, LogStatus) VALUES('{0}','{1}','{2}','{3}','{4}','{5}')", LotNo, InvoiceNo, ReplaceText(JsonData), ReplaceText(ResponseData), curr_date_full, LogStatus);
        db.ExecuteNonQuery(sql, ref error);
        }*/
    }


    public class DataLines
    {
        public string to { get; set; }
        public string keyword_id { get; set; }
        public DataParams Params { get; set; }
    }
    public class DataParams
    {
        public string invoice { get; set; }
        public string adddate { get; set; }
        public string addtime { get; set; }
        public string status { get; set; }
    }

    public class DataOrderList
    {
        public string product_id { get; set; }
        public string product_name { get; set; }
        public string line_number { get; set; }
        public string qty { get; set; }
    }
}