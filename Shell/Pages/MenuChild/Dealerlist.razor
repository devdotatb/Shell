@page "/dealerlist"

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />

@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
        <br /><br /><center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/icon-alert.png" alt="" />ข้อมูลร้านค้า</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">ข้อมูลร้านค้า</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="row">
                                        <div class="col-md-5 rows">
                                            <div class="input-group">
                                                <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="field_select" class="form-control" @bind="field_selected">
                                                    <option Value="ShopName">ชื่อร้านค้า</option>
                                                    <option Value="ContactName">ชื่อผู้ติดต่อ</option>
                                                    <option Value="ACode">รหัสผู้ใช้งาน</option>
                                                    <option Value="Site">เขต</option>
                                                    <option Value="ShopType">ประเภท</option>
                                                    <option Value="Tier">ประเภทย่อย</option>
                                                    <option Value="DSM.Fullname">ชื่อ DSM</option>
                                                    <option Value="DSR.Fullname">ชื่อ DSR</option>
                                                    <option Value="OBAM.Fullname">ชื่อ OBAM</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" @onclick="btnClear_Click" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (divsuccess_Visible)
            {
                <div id="divsuccess" class="alert alert-success" role="alert">
                    @lblSuccess<button type="button" id="btnExportSuccess" @onclick="btnExportSuccess_Click" class="btn btn-default" style="float:right;">ผลการนำข้อมูลเข้า</button>
                </div>
            }
            @if (diverror_Visible)
            {
                <div id="diverror" class="alert alert-danger" role="alert">@lblMsg</div>
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (hplPoint_Visible)
                        {
                            <div id="hplPoint" class="btn btn-default" data-toggle="modal" data-target="#modalpoint"><i class="glyphicon glyphicon-save-file"></i> Update Points</div>
                        }
                        @if (hplImport_Visible)
                        {
                            <div id="hplImport" class="btn btn-default" @onclick=OpenImportModal><i class="glyphicon glyphicon-save-file"></i> นำข้อมูลเข้า</div>
                        }
                        @if (hplExport_Visible)
                        {
                            <div id="hplExport" class="btn btn-default" @onclick=btnExport_Click><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</div>
                            <div id="btnExport" Text="นำข้อมูลออก" OnClick="btnExport_Click" class="hidden" />

                        }
                    </div>
                </div>
            </div>

            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th>รหัสผู้ใช้งาน</th>
                                    <th>ชื่อร้านค้า</th>
                                    <th>ชื่อผู้ติดต่อ</th>
                                    <th>เขต</th>
                                    <th>ประเภท</th>
                                    <th>ประเภทย่อย</th>
                                    <th>LINE UID</th>
                                    <th>DSM</th>
                                    <th>DSR</th>
                                    <th>OBAM</th>
                                    <th>Point</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var shopitem in searchDataPaged)
                                {
                                    <tr>
                                        <td>@shopitem.Acode</td>
                                        <td>@shopitem.ShopName</td>
                                        <td>@shopitem.ContactName</td>
                                        <td>@shopitem.Site</td>
                                        <td>@shopitem.ShopType</td>
                                        <td>@shopitem.Tier</td>
                                        <td>@shopitem.LineUid</td>
                                        <td>@shopitem.DSMName</td>
                                        <td>@shopitem.DSRName</td>
                                        <td>@shopitem.OBAMName</td>
                                        <td>@shopitem.CurrentPoint</td>
                                    </tr>
                                }
                                @if (IsEmpty)
                                {
                                    <tr><td align='center' colspan='11'><b>ไม่มีข้อมูล</b></td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}

<ModalImport @ref="import_modal" OnClose="@OnImportModalClose"
             @bind-DivErrorVisible="diverror_Visible" @bind-ErrorMessage="lblMsg" @bind-DivSuccessVisible="divsuccess_Visible" @bind-SuccessMessage="lblSuccess"
             GoSearch="@btnSearch_Click" @bind-ImportDataParam="importeddata"></ModalImport>
<div class="modal fade" id="modalpoint" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 rows">
                        <div class="input-group text-center">
                            <label class="col-form-label">คุณยืนยันที่จะ Update Point ใช่หรือไม่</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="border:0;">
                <div class="row">
                    <div class="col-md-3">&nbsp;</div>
                    <div class="col-md-3"><Button id="btnPoint" Text="ตกลง" OnClick="btnPoint_Click" class="btn btn-success btn-block login-button" /></div>
                    <div class="col-md-3"><button type="button" class="btn btn-default btn-block" data-dismiss="modal">ยกเลิก</button></div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>

@using ClosedXML.Excel
@using Shell.Data
@using Shell.Data.ExcelData
@using Shell.Data.SearchData
@using Shell.Model
@using Microsoft.Extensions.Configuration
@using Shell.XLS
@using Shell.Service
@inject IJSRuntime js
@inject IConfiguration Configuration
@inject ISecure secure
@inject NavigationManager Navigation
@code {
    public List<DealerListSearchData> searchData_iquery = new List<DealerListSearchData>();
    public List<DealerListSearchData> searchDataPaged = new List<DealerListSearchData>();

    public string? SearchTxt;
    public string? field_selected = "ShopName";

    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;


    private ModalImport import_modal { get; set; }
    public string? lblSuccess;

    public bool diverror_Visible = false;
    public bool divsuccess_Visible = false;
    public string? lblMsg;
    public bool IsEmpty = false;

    public bool hplImport_Visible = false;
    public bool hplPoint_Visible = false;
    public bool hplExport_Visible = false;

    public List<MasterExcelImportData> importeddata { get; set; } = new List<MasterExcelImportData>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            this.pageSize = int.Parse(configuration["PageSize"]);
            btnSearch_Click();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("1");
        int chk_authorize2 = await secure.Check_Document_Authorize("1", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
            int Create_Per = await secure.Check_Document_Authorize("1", "1");
            int Edit_Per = await secure.Check_Document_Authorize("1", "2");
            if (Create_Per == 1 && Edit_Per == 1)
            {
                hplImport_Visible = true;
                hplPoint_Visible = true;
            }
            int Export_Per = await secure.Check_Document_Authorize("1", "7");
            if (Export_Per == 1)
            {
                hplExport_Visible = true;
            }
        }
    }

    IQueryable<DealerListSearchData> QuerySearch(SHELLREGContext db)
    {
        var query = (
        from TradeOwner in db.TradeOwners.Where(t1 => t1.Acode != "")
        from DSM in db.Users.Where(DSM => TradeOwner.Dsmid == DSM.UserId && DSM.Position == "DSM").DefaultIfEmpty()
        from DSR in db.Users.Where(DSR => TradeOwner.Dsmid == DSR.UserId && DSR.Position == "DSR").DefaultIfEmpty()
        from OBAM in db.Users.Where(OBAM => TradeOwner.Dsmid == OBAM.UserId && OBAM.Position == "OBAM").DefaultIfEmpty()

        select new DealerListSearchData()
            {


                Acode = TradeOwner.Acode,
                ShopName = TradeOwner.ShopName,
                ContactName = TradeOwner.ContactName,
                Site = TradeOwner.Site,
                ShopType = TradeOwner.ShopType,
                Tier = TradeOwner.Tier,
                LineUid = TradeOwner.LineUid,
                DSMName = DSM.Fullname,
                DSRName = DSR.Fullname,
                OBAMName = OBAM.Fullname,
                CurrentPoint = 0,
            }
        );
        return query;
    }

    IQueryable<DealerListSearchData> Specify(IQueryable<DealerListSearchData> query)
    {
        IQueryable<DealerListSearchData> filtered;
        if (string.IsNullOrWhiteSpace(SearchTxt))
        {
            return query;
        }
        switch (field_selected)
        {
            case "ShopName":
                {
                    filtered = query.Where(t => t.ShopName.Contains(SearchTxt));
                    break;
                }
            case "ContactName":
                {
                    filtered = query.Where(t => t.ContactName.Contains(SearchTxt));
                    break;
                }
            case "ACode":
                {
                    filtered = query.Where(t => t.Acode.Contains(SearchTxt));
                    break;
                }
            case "Site":
                {
                    filtered = query.Where(t => t.Site.Contains(SearchTxt));
                    break;
                }
            case "Tier":
                {
                    filtered = query.Where(t => t.Tier.Contains(SearchTxt));
                    break;
                }
            case "DSM.Fullname":
                {
                    filtered = query.Where(t => t.DSMName.Contains(SearchTxt));
                    break;
                }
            case "DSR.Fullname":
                {
                    filtered = query.Where(t => t.DSRName.Contains(SearchTxt));
                    break;
                }
            case "OBAM.Fullname":
                {
                    filtered = query.Where(t => t.OBAMName.Contains(SearchTxt));
                    break;
                }
            default:
                {
                    filtered = query;
                    break;
                }
        }
        return filtered;
    }

    void SetData(IQueryable<DealerListSearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void btnSearch_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
            if (filtered.Any())
            {
                IsEmpty = false;
            }
            else
            {
                IsEmpty = true;
            }
            StateHasChanged();
        }
    }
    void btnClear_Click()
    {
        this.SearchTxt = "";
        this.field_selected = "ShopName";
        btnSearch_Click();
    }

    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }


    #region ImportModal
    private void OnImportModalClose(bool accepted)
    {
        //StateHasChanged();
    }
    private void OpenImportModal()
    {
        import_modal.OpenMyDisplay();
        //StateHasChanged();
    }

    #endregion

    private async void btnExportSuccess_Click()
    {
        var xls = new Excel();
        await xls.GenerateMasterExcelImportDataAsync(js, importeddata, "export.xlsx");
    }

    public async void btnExport_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QueryExport(db);
            var filtered = this.SpecifyExport(query);
            var xls = new Excel();
            await xls.GenerateMasterExcelImportDataAsync(js, filtered.ToList(), "export.xlsx");

        }
    }

    IQueryable<MasterExcelImportData> QueryExport(SHELLREGContext db)
    {
        var query = (
        from TradeOwner in db.TradeOwners.Where(t1 => t1.Acode != "")
        from DSM in db.Users.Where(DSM => TradeOwner.Dsmid == DSM.UserId && DSM.Position == "DSM").DefaultIfEmpty()
        from DSR in db.Users.Where(DSR => TradeOwner.Dsmid == DSR.UserId && DSR.Position == "DSR").DefaultIfEmpty()
        from OBAM in db.Users.Where(OBAM => TradeOwner.Dsmid == OBAM.UserId && OBAM.Position == "OBAM").DefaultIfEmpty()

        select new MasterExcelImportData()
            {
                GeoRegion = TradeOwner.GeoRegion,
                ClusterCode = TradeOwner.ClusterCode,
                SiteName = TradeOwner.SiteName,
                ShopName = TradeOwner.ShopName,
                ACode = TradeOwner.Acode,
                ContactName = TradeOwner.ContactName,
                ContactPhone = TradeOwner.ContactPhone,
                DSMName = DSM.Fullname,
                DSMID = DSM.UserId,
                DSRName = DSR.Fullname,
                DSRID = DSR.UserId,
                OBAMName = OBAM.Fullname,
                OBAMID = OBAM.UserId,
                OBAMPhone = OBAM.Phone,
                OBAMEmail = OBAM.Email,
                Site = TradeOwner.Site,
                Brand = TradeOwner.Brand,
                ShopType = TradeOwner.ShopType,
                CustShopType = TradeOwner.CustShopType,
                CustSubShopType = TradeOwner.CustSubShopType,
                LineUID = TradeOwner.LineUid,
                DSMLineUID = DSM.LineUid,
                DSRLineUID = DSR.LineUid,
                OBAMLineUID = OBAM.LineUid,
                Agree = TradeOwner.Agree == true ? "1" : "0",
                AgreeDate = TradeOwner.AgreeDate,
            //ApproveStatus = TradeOwner.Status == "" ? (TradeOwner.RegisterCheck == true ? "register" : "") : TradeOwner.Status,
            //ApproveDate = TradeOwner.UserDate,
            //ApprovedBy = TradeOwner.UserEdit,
            //UserShare = TradeOwner.UserShare,
                DSRPhone = DSR.Phone,
            /*ShopAddress1 = XXXXXXXXX,
            ShopAddress2 = XXXXXXXXX,
            ShopPostalCode = XXXXXXXXX,
            ShopCompanyCity = XXXXXXXXX,
            StateName = XXXXXXXXX,*/
            }
        );
        return query.OrderBy(o => o.ACode);//.ThenBy(o => o.DSM.Position);
                                           //ORDER BY ACode, DSM.Position", where);
    }

    IQueryable<MasterExcelImportData> SpecifyExport(IQueryable<MasterExcelImportData> query)
    {
        IQueryable<MasterExcelImportData> filtered;
        if (string.IsNullOrWhiteSpace(SearchTxt))
        {
            return query;
        }
        switch (field_selected)
        {
            case "ShopName":
                {
                    filtered = query.Where(t => t.ShopName.Contains(SearchTxt));
                    break;
                }
            case "ContactName":
                {
                    filtered = query.Where(t => t.ContactName.Contains(SearchTxt));
                    break;
                }
            case "ACode":
                {
                    filtered = query.Where(t => t.ACode.Contains(SearchTxt));
                    break;
                }
            case "Site":
                {
                    filtered = query.Where(t => t.Site.Contains(SearchTxt));
                    break;
                }
            case "Tier":
                {
                    filtered = query.Where(t => t.Tier.Contains(SearchTxt));
                    break;
                }
            case "DSM.Fullname":
                {
                    filtered = query.Where(t => t.DSMName.Contains(SearchTxt));
                    break;
                }
            case "DSR.Fullname":
                {
                    filtered = query.Where(t => t.DSRName.Contains(SearchTxt));
                    break;
                }
            case "OBAM.Fullname":
                {
                    filtered = query.Where(t => t.OBAMName.Contains(SearchTxt));
                    break;
                }
            default:
                {
                    filtered = query;
                    break;
                }
        }
        return filtered;
    }

    }
