@page "/dealerkey"

    <link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
    <link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
    @*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
    <link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />
<div id="page-wrapper">
    <div class="container-fluid">
        <div class="modal-body">
            <div class="row">
                <div class="col-xs-9"></div>
                <div class="col-xs-3"><a class="btn btn-default btn-block hidden" id="selectall">เลือกทั้งหมด</a></div>
            </div>
            <div>&nbsp;</div>
            <div class="row">
                <div class="col-xs-12">
                    <table class="dataTable table-bordered table-striped table-condensed tables" style="width:100%;">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="checkall" /></th>
                                <th>รหัสผู้ใช้งาน</th>
                                <th>ชื่อร้านค้า</th>
                                <th>เขต</th>
                                <th>ประเภท</th>
                                <th>ประเภทย่อย</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var each_item in searchDataPaged)
                            {
                                <tr>
                                    <td align="center"><input type="checkbox" class="table-checkbox" data-id="@each_item.ACode" /></td>
                                    <td>@each_item.ACode</td>
                                    <td>@each_item.ShopName</td>
                                    <td>@each_item.Site</td>
                                    <td>@each_item.ShopType</td>
                                    <td>@each_item.Tier</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="modal-footer" style="border:0;">
            <div class="row">
                <div class="col-xs-12">
                    <textarea id="txtcopy" rows="4" cols="1" class="form-control"></textarea>
                </div>
            </div>
        </div>
        <div>&nbsp;</div>
    </div>
</div>

@using Shell.Model
@using ClosedXML.Excel
@using Shell.Data 
@using Shell.Data.ExcelData 
@using Shell.Data.SearchData
@using Shell.Model
@inject IJSRuntime js

@using Microsoft.Extensions.Configuration
@using Shell.XLS
@inject IConfiguration Configuration

@using Shell.Service
@inject ISecure secure


@code {
    public List<DealerKeySearchData> searchData_iquery = new List<DealerKeySearchData>();
    public List<DealerKeySearchData> searchDataPaged = new List<DealerKeySearchData>();

    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            this.pageSize = int.Parse(configuration["PageSize"]);
            using (var db = new SHELLREGContext())
            {
                var query = this.QuerySearch(db);
                var filtered = this.Specify(query);
                this.SetData(filtered);
            }
            StateHasChanged();
            await js.InvokeVoidAsync("Dealerkeyjs");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Authorize()
    {
    }

    IEnumerable<DealerKeySearchData> QuerySearch(SHELLREGContext db)
    {
        var query = (
            from TradeOwner in db.TradeOwners.Where(t1 => !string.IsNullOrWhiteSpace(t1.Acode))

            select new DealerKeySearchData()
                {
                    ACode = TradeOwner.Acode,
                    ShopName = TradeOwner.ShopName,
                    Site = TradeOwner.Site,
                    ShopType = TradeOwner.ShopType,
                    Tier = TradeOwner.Tier,
                }
        );
        return query;
    }

    IEnumerable<DealerKeySearchData> Specify(IEnumerable<DealerKeySearchData> query)
    {
        var filtered = query;
        return filtered;
    }

    void SetData(IEnumerable<DealerKeySearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = query.Count();//(int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery;//this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

}
