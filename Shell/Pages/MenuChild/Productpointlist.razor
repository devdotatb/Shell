@page "/productpointlist"

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />

@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
    <br />
    <br />
    <center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/config.png" alt="" />ข้อมูลแต้มสินค้า</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">ข้อมูลสินค้า</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="row">
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="field_select" class="form-control" @bind="field_selected">
                                                    <option Value="MaterialCode">รหัสสินค้า</option>
                                                    <option Value="ProductName">ชื่อสินค้า</option>
                                                    <option Value="ProductModel">รุ่นสินค้า</option>
                                                    <option Value="ProductCarType">ประเภทรถ</option>
                                                    <option Value="ProductVis">ค่าความหนืด</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="field_select" class="form-control" @bind="producttype_selected">
                                                    <option Value="">ประเภทสินค้า</option>
                                                    <option Value="1">สินค้าปกติ</option>
                                                    <option Value="2">สินค้าโปรฯ</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='productpointlist';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (divsuccess_Visible)
            {
                <div id="divsuccess" visible="false" class="alert alert-success" role="alert">
                    @lblSuccess
                    <button type="button" id="btnExportSuccess" class="btn btn-default" style="float:right;">ผลการนำข้อมูลเข้า</button>
                </div>
            }
            @if (diverror_Visible)
            {
                <div id="diverror" visible="false" class="alert alert-danger" role="alert">
                    @lblMsg
                </div>
            }
            @if (divpicture_Visible)
            {
                <div id="divpicture" visible="false" class="alert alert-info" role="alert">
                    @lblPic
                </div>
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (hplPoint_Visible)
                        {
                            <a id="hplPoint" class="btn btn-default" @onclick=@OpenPointModal><i class="glyphicon glyphicon-save-file"></i> อัพเดตแต้ม</a>
                        }
                        @if (hplImport_Visible)
                        {
                            <a id="hplImport" class="btn btn-default" @onclick=@OpenImportModal><i class="glyphicon glyphicon-save-file"></i> อัพเดตแต้มจาก Share</a>
                        }
                        @if (hplExport_Visible)
                        {
                            <a id="hplExport" class="btn btn-default linkload" @onclick=@btnExport_Click><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</a>
                            <button id="btnExport" @onclick="btnExport_Click" class="hidden">นำข้อมูลออก</button>
                        }
                    </div>
                </div>
            </div>

            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="15%">Material Code</th>
                                    <th width="25%">ชื่อสินค้า</th>
                                    <th width="15%">รุ่นสินค้า</th>
                                    <th width="10%">ประเภทรถ</th>
                                    <th width="10%">ค่าความหนืด</th>
                                    <th width="10%">ประเภทสินค้า</th>
                                    <th width="10%">SHARECode</th>
                                    <th width="5%">แต้มสินค้า</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var eachitem in searchDataPaged)
                                {
                                    <tr>
                                        <td>@eachitem.MaterialCode</td>
                                        <td>@eachitem.ProductName</td>
                                        <td>@eachitem.ProductModel</td>
                                        <td>@eachitem.ProductCarType</td>
                                        <td>@eachitem.ProductVis</td>
                                        <td>@eachitem.ProductTypeName</td>
                                        <td>@eachitem.SHARECode</td>
                                        <td align="center">
                                            <button type='button' class='btn btn-secondary' data-toggle='tooltip' data-placement='left' data-html='true' title='Point'>
                                                ดูแต้ม
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}
@using ClosedXML.Excel
@using Nancy.Json
@using Newtonsoft.Json.Linq
@using OfficeOpenXml
@using Shell.Data
@using Shell.Data.ExcelData
@using Shell.Data.SearchData
@using Shell.Model
@using Shell.Service
@using Shell.XLS
@inject IConfigSystem consys
@inject IJSRuntime js
@inject IclsDefault my_clsDefault
@inject Blazored.LocalStorage.ILocalStorageService sessionStorage
@inject ISecure secure
@inject NavigationManager Navigation

@code {
    //Searching
    public string field_selected = "MaterialCode";
    public string producttype_selected = "";
    public string statusSelected = "";
    public string? SearchTxt;
    public List<ProductPointListSearchData> searchData_iquery = new List<ProductPointListSearchData>();
    public List<ProductPointListSearchData> searchDataPaged = new List<ProductPointListSearchData>();

    //ImportExportDescription
    public bool divsuccess_Visible = false;
    public bool diverror_Visible = false;
    public bool divpicture_Visible = false;
    public bool hplImport_Visible = false;
    public bool hplPoint_Visible = false;
    public bool hplExport_Visible = false;
    public string lblSuccess = "";
    public string lblMsg = "";
    public string lblPic = "";

    //paging
    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;



    string curr_date = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year;
    string curr_time = DateTime.Now.ToString("HH:mm:ss");
    string curr_times = DateTime.Now.ToString("HH:mm");
    string curr_date_full = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year + " " + DateTime.Now.ToString("HH:mm:ss");
    int curr_date_num = Convert.ToInt32(DateTime.Now.Year + DateTime.Now.ToString("MMdd"));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            this.pageSize = int.Parse(configuration["PageSize"]);
            using (var db = new SHELLREGContext())
            {
                var query = this.QuerySearch(db);
                var filtered = this.Specify(query);
                this.SetData(filtered);
            }
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("3");
        int chk_authorize2 = await secure.Check_Document_Authorize("6", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
            int Create_Per = await secure.Check_Document_Authorize("6", "1");
            int Edit_Per = await secure.Check_Document_Authorize("6", "2");
            if (Create_Per == 1 && Edit_Per == 1)
            {
                hplImport_Visible = true;
                hplPoint_Visible = true;
            }
            int Export_Per = await secure.Check_Document_Authorize("6", "7");
            if (Export_Per == 1)
            {
                hplExport_Visible = true;
            }
        }
    }


    IEnumerable<ProductPointListSearchData> QuerySearch(SHELLREGContext db)
    {
        var query = (
            from Product in db.Products.Where(t1 => !string.IsNullOrWhiteSpace(t1.MaterialCode))
            join pt in db.ProductTypes on Product.ProductType equals pt.ProductType1.ToString()

            select new ProductPointListSearchData()
                {
                    MaterialCode = Product.MaterialCode,
                    ProductName = Product.ProductName,
                    ProductModel = Product.ProductModel,
                    ProductCarType = Product.ProductCarType,
                    ProductVis = Product.ProductVis,
                    ProductTypeName = pt.ProductTypeName,
                    StartDate = Product.StartDate,
                    EndDate = Product.EndDate,
                //SHARECode = Product.SHARECode,
                //Point = Product.Point,
                }
        );
        return query;
    }

    IEnumerable<ProductPointListSearchData> Specify(IEnumerable<ProductPointListSearchData> query)
    {
        var filtered = query;
        return filtered;
    }

    void SetData(IEnumerable<ProductPointListSearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }
    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }
    public void btnSearch_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
        }
    }
    public async void btnExport_Click()
    {
        /*CustSubShopType missing*/
        using (var db = new SHELLREGContext())
        {
            var query = this.QueryExport(db);
            var filtered = this.SpecifyExport(query);
            var xls = new Excel();
            //await xls.GenerateProductPointListExcelImportDataAsync(js, filtered.ToList(), "export.xlsx");

        }
    }
    IEnumerable<ProductPointImportData> QueryExport(SHELLREGContext db)
    {
        return null;
    }

    IEnumerable<ProductPointImportData> SpecifyExport(IEnumerable<ProductPointImportData> query)
    {
        var filtered = query;
        return filtered;
    }

}

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}
@code {
    public bool ShowBackdrop = false;
}
<div class="modal @ImportModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@ImportModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@CloseImportModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 rows">
                        <div class="input-group text-center">
                            <label class="col-form-label">คุณยืนยันที่จะอัพเดตแต้มจาก Share ใช่หรือไม่</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="border:0;">
                <div class="row">
                    <div class="col-md-3">&nbsp;</div>
                    <div class="col-md-3"><button id="btnOK" @onclick=@btnOK_Click class="btn btn-success btn-block login-button">ตกลง</button></div>
                    <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@CloseImportModal">ยกเลิก</button></div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>

@code {
    public string ImportModalDisplay = "none;";
    public string ImportModalClass = "";
    private void OpenImportModal()
    {
        ImportModalDisplay = "block;";
        ImportModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void CloseImportModal()
    {
        ImportModalDisplay = "none";
        ImportModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    public async Task btnOK_Click()
    {
        var usrid = await sessionStorage.GetItemAsync<string>("UserID");
        string clientIp = "::1";
        new LogSystemService().InsertLog(usrid, "Point API", clientIp);

        int asql = 0;
        diverror_Visible = false;

        string content = "";
        string jsondata = "";
        Dictionary<string, string> header = new Dictionary<string, string>();
        try
        {
            string access_token = consys.GetAccessToken();

            jsondata = new JavaScriptSerializer().Serialize(new
            {
                client_id = consys.Get_client_id(),
                user_id = consys.Get_user_id(),
                workshop_shell_code = consys.Get_workshop_shell_code(),
                access_token = access_token
            });

            header.Add("ER-Token", consys.Get_ERToken());

            content = consys.ApiDataReader(jsondata, consys.Get_UrlApiEndPoint_getclientordercatalogue(), "POST", header).ReadToEnd();

            JObject rss = JObject.Parse(content);
            if (rss["ResponseCode"].ToString() == "9100")
            {
                using (var db = new SHELLREGContext())
                {
                    using (var dbContextTransaction = db.Database.BeginTransaction())
                    {
                        try
                        {
                            foreach (var item in rss["Data"])
                            {
                                string MaterialCode = "", CustShopType = "", CustSubShopType = "";
                                string LogStatus = GetLogStatus(ReplaceText(item["sku"].ToString()), ReplaceText(item["company_type"].ToString()), ref MaterialCode, ref CustShopType, ref CustSubShopType);

                                string start_date = ReplaceText(item["start_date"].ToString());
                                string end_date = ReplaceText(item["end_date"].ToString());

                                if (LogStatus == "")
                                {
                                    bool isupdate = false;
                                    if (start_date == "" && end_date == "")
                                    {
                                        isupdate = true;
                                    }
                                    else if (start_date.Length == 10 && end_date.Length == 10)
                                    {
                                        int istart = Convert.ToInt32(start_date.Substring(6, 4) + start_date.Substring(3, 2) + start_date.Substring(0, 2));
                                        int iend = Convert.ToInt32(end_date.Substring(6, 4) + end_date.Substring(3, 2) + end_date.Substring(0, 2));

                                        if (curr_date_num >= istart && curr_date_num <= iend)
                                        {
                                            isupdate = true;
                                        }
                                        else if (curr_date_num > iend)
                                        {
                                            item["bonus_points"] = "0.00";
                                            item["id"] = "0";
                                            isupdate = true;
                                        }
                                    }

                                    if (isupdate)
                                    {
                                        /*var finding_ProductPoint = db.ProductPoints.Where(t => t.MaterialCode == MaterialCode
                                        && t.ShareCode == ReplaceText(item["sku"].ToString()
                                    && t.CustShopType == CustShopType
                                        && t.CustSubShopType == CustSubShopType
                                        );
                                        if (finding_ProductPoint.Any())
                                        {
                                            foreach (var eachfound in finding_ProductPoint)
                                            {
                                            eachfound.CurrentPoint = ReplaceText(item["bonus_points"].ToString();
                                            eachfound.CurrentBonusPoint = 0;
                                            eachfound.SHAREID = ReplaceText(item["id"].ToString();
                                        eachfound.EditDate = curr_date;
                                    eachfound.EditTime = curr_time;
                                    }
                                    }
                                        else
                                        {
                                        db.ProductPoints.Add();

                                        sql = string.Format(@"INSERT INTO ProductPoint(MaterialCode, SHARECode, CustShopType, CustSubShopType, CurrentPoint
                                                                                , CurrentBonusPoint, SHAREID, ProductQty, EditDate, EditTime)
                                                VALUES('{0}', '{1}', '{2}', '{3}', '{4}'
                                                        , '{5}', '{6}', '{7}', '{8}', '{9}')"
                                        , MaterialCode, ReplaceText(item["sku"].ToString()), CustShopType, CustSubShopType, ReplaceText(item["bonus_points"].ToString())
                                        , 0, ReplaceText(item["id"].ToString()), 1, curr_date, curr_time);
                                    asql.Add(sql);
                                    }*/
                                        db.SaveChanges();
                                        asql++;
                                    }
                                }
                                //db.ProductPointLog.Add();
                                /*
                                sql = string.Format(@"INSERT INTO ProductPointLog(SHAREID, SHARECode, Name, LocalName, Description
                                                                                , Type, Groups, DisplayGroup, PackSize, Litres
                                                                                , ImageUrl, Points, BonusPoints, StartDate, EndDate
                                                                                , WorkshopTypeCode, LogDate, LogStatus)
                                                    VALUES('{0}', '{1}', '{2}', '{3}', '{4}'
                                                            , '{5}', '{6}', '{7}', '{8}', '{9}'
                                                            , '{10}', '{11}', '{12}', '{13}', '{14}'
                                                            , '{15}', '{16}', '{17}')"
                                    , ReplaceText(item["id"].ToString()), ReplaceText(item["sku"].ToString()), ReplaceText(item["name"].ToString()), ReplaceText(item["local_name"].ToString()), ReplaceText(item["description"].ToString())
                                    , ReplaceText(item["type"].ToString()), ReplaceText(item["group"].ToString()), ReplaceText(item["display_group"].ToString()), ReplaceText(item["pack_size"].ToString()), ReplaceText(item["litres"].ToString())
                                    , ReplaceText(item["image_url"].ToString()), ReplaceText(item["bonus_points"].ToString()), 0, ReplaceText(item["start_date"].ToString()), ReplaceText(item["end_date"].ToString())
                                    , ReplaceText(item["company_type"].ToString()), curr_date_full, LogStatus);
                                asql.Add(sql);*/
                                db.SaveChanges();
                                asql++;
                            }
                            if (asql > 0)
                            {
                                dbContextTransaction.Commit();
                                divsuccess_Visible = true;
                                lblSuccess = "SUCCESS: อัพเดตแต้มเรียบร้อยแล้ว";
                                btnSearch_Click();
                            }
                        }
                        catch (Exception ex)
                        {
                            if (asql > 0)
                            {
                                dbContextTransaction.Rollback();
                            }
                            diverror_Visible = true;
                            lblMsg = "ERROR: " + ex.Message;
                            return;
                        }
                    }
                }
            }
            else if (rss["ResponseCode"].ToString() == "9103")
            {
                //Session["access_token"] = "";
                diverror_Visible = true;
                lblMsg = rss["ResponseCode"].ToString() + " : " + rss["Msg"].ToString();
            }
            else
            {
                diverror_Visible = true;
                lblMsg = rss["ResponseCode"].ToString() + " : " + rss["Msg"].ToString();
            }
        }
        catch (Exception ex)
        {
            diverror_Visible = true;
            lblMsg = "ERROR: " + ex.Message;
            return;
        }
    }
    private string GetLogStatus(string SHARECode, string WorkshopTypeCode, ref string MaterialCode, ref string CustShopType, ref string CustSubShopType)
    {
        string LogStatus = "";

        using (var db = new SHELLREGContext())
        {
            /*var filter_MaterialCode = db.Products.Where(t => t.SHARECode == SHARECode);
            if (filter_MaterialCode.Any())
            {
                MaterialCode = filter_MaterialCode.First().MaterialCode;
            }

            var filter_CustShopType = db.CustShopType.Where(t => t.WorkshopTypeCode == WorkshopTypeCode);
            if (filter_CustShopType.Any())
            {
                var founded_custshoptype = filter_CustShopType.First();
                CustShopType = founded_custshoptype.CustShopType;
                CustSubShopType = founded_custshoptype.CustSubShopType;
            }*/

            if (MaterialCode == "")
            {
                LogStatus += ":Not Found MaterialCode";
            }
            if (CustShopType == "")
            {
                LogStatus += ":Not Found CustShopType";
            }
            if (CustSubShopType == "")
            {
                LogStatus += ":Not Found CustSubShopType";
            }
            if (LogStatus.Length > 1)
            {
                LogStatus = LogStatus.Substring(1);
            }
            return LogStatus;
        }

    }
    private string ReplaceText(string txt)
    {
        return txt.Replace(@"'", "").Trim();
    }
                }

<div class="modal @PointModalClass" id="modalpoint" tabindex="-1" role="dialog" style="display:@PointModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@ClosePointModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 rows">
                        <div class="input-group text-center">
                            <label class="col-form-label">คุณยืนยันที่จะอัพเดตแต้มใช่หรือไม่</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer" style="border:0;">
                <div class="row">
                    <div class="col-md-3">&nbsp;</div>
                    <div class="col-md-3">
                        <button type="button" id="btnImport" @onclick=@btnPoint_Click class="btn btn-success btn-block login-button">ตกลง</button>
                    </div>
                    <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@ClosePointModal">ยกเลิก</button></div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>

    @code {
    public string PointModalDisplay = "none;";
    public string PointModalClass = "";

    private void OpenPointModal()
    {
        PointModalDisplay = "block;";
        PointModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void ClosePointModal()
    {
        PointModalDisplay = "none";
        PointModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public void btnPoint_Click()
    {
        int asql = 0;
        using (var db = new SHELLREGContext())
        {
            /*
            var finding = db.ProductPointLogs.Where(t => true).Select(t => new ProductPointLogData()
                {
                    SHAREID = t.SHAREID,
                    SHARECode = t.SHARECode,
                    Points = t.Points,
                    BonusPoints = t.BonusPoints,
                    WorkshopTypeCode = t.WorkshopTypeCode,
                    StartDate = t.StartDate,//convert
                    EndDate = t.EndDate,//convert
                }).ToList();
            var filter = finding.Where(t => (t.StartDate < DateTimeOffset.Now < t.EndDate) || DateTimeOffset.Now < t.EndDate);
            foreach (var eachfilter in filter)
            {
                using (var dbContextTransaction = db.Database.BeginTransaction())
                {
                    try
                    {
                        string MaterialCode = "", CustShopType = "", CustSubShopType = "";
                        string LogStatus = GetLogStatus(ReplaceText(eachfilter.SHARECode), ReplaceText(eachfilter.WorkshopTypeCode), ref MaterialCode, ref CustShopType, ref CustSubShopType);
                        string StartDate = ReplaceText(eachfilter.StartDate);
                        string EndDate = ReplaceText(eachfilter.EndDate);
                        if (LogStatus == "")
                        {
                            bool isupdate = false;
                            if (StartDate == "" && EndDate == "")
                            {
                                isupdate = true;
                            }
                            else if (StartDate.Length == 10 && EndDate.Length == 10)
                            {
                                int istart = Convert.ToInt32(StartDate.Substring(6, 4) + StartDate.Substring(3, 2) + StartDate.Substring(0, 2));
                                int iend = Convert.ToInt32(EndDate.Substring(6, 4) + EndDate.Substring(3, 2) + EndDate.Substring(0, 2));

                                if (curr_date_num >= istart && curr_date_num <= iend)
                                {
                                    isupdate = true;
                                }
                                else if (curr_date_num > iend)
                                {
                                    eachfilter.Points = "0.00";
                                    eachfilter.SHAREID = "0";
                                    isupdate = true;
                                }
                            }
                            if (isupdate)
                            {

                                        var finding_ProductPoint = db.ProductPoints.Where(t => t.MaterialCode == MaterialCode
                                        && t.ShareCode == ReplaceText(eachfilter.SHARECode)
                                    && t.CustShopType == CustShopType
                                        && t.CustSubShopType == CustSubShopType
                                        );
                                        if (finding_ProductPoint.Any())
                                        {
                                            foreach (var eachfound in finding_ProductPoint)
                                            {
                                            eachfound.CurrentPoint = ReplaceText(eachfilter.Points);
                                            eachfound.CurrentBonusPoint = ReplaceText(eachfilter.BonusPoints);
                                            eachfound.SHAREID = ReplaceText(eachfilter.SHAREID);
                                        eachfound.EditDate = curr_date;
                                    eachfound.EditTime = curr_time;
                                    }
                                    }
                                        else
                                        {
                                        db.ProductPoints.Add();

                                    //    sql = string.Format(@"INSERT INTO ProductPoint(MaterialCode, SHARECode, CustShopType, CustSubShopType, CurrentPoint
                                    //                                            , CurrentBonusPoint, SHAREID, ProductQty, EditDate, EditTime)
                                    //            VALUES('{0}', '{1}', '{2}', '{3}', '{4}'
                                    //                    , '{5}', '{6}', '{7}', '{8}', '{9}')"
                                    //    , MaterialCode, ReplaceText(item["sku"].ToString()), CustShopType, CustSubShopType, ReplaceText(item["bonus_points"].ToString())
                                    //    , 0, ReplaceText(item["id"].ToString()), 1, curr_date, curr_time);
                                    //asql.Add(sql);
                                    }
                                        db.SaveChanges();
                                        asql++;
                                }
                            }
                        }
                            if (asql > 0)
                            {
                                dbContextTransaction.Commit();
                                if (error == "")
                                {
                                    divsuccess_Visible = true;
                                    lblSuccess = "SUCCESS: อัพเดตแต้มเรียบร้อยแล้ว";
                                    btnSearch_Click();
                                }
                                else
                                {
                                    diverror_Visible = true;
                                    lblMsg = "ERROR: " + error;
                                    return;
                                }
                            }
                    }
                    catch
                    {
                        if (asql > 0)
                        {
                            dbContextTransaction.Rollback();
                        }
                    }
                }
            }*/
        }
    }
}