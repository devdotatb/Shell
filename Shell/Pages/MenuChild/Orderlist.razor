@page "/orderlist"

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />


@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
    <br />
    <br />
    <center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/report.png" alt="" />รายการสั่งซื้อน้ำมันครื่องเชลล์</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">ข้อมูลร้านค้า</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-6 rows">
                                    <div class="datepicker input-daterange input-group">
                                        <span class="input-group-addon first-text">จาก - ถึง <i class="fa fa-calendar ifrom" aria-hidden="true"></i></span>
                                        <DateRangePicker class="form-control" @bind-StartDate="StartDate" @bind-EndDate="EndDate" />
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="dealerSelected">
                                            <option Value="">ชื่อร้านค้า</option>
                                            @foreach (var each in ShopList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="invStatSelected">
                                            <option Value="">สถานะ</option>
                                            @foreach (var each in InvoiceStatusList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 rows">
                                    <div class="input-group">
                                        <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="field_selected">
                                            <option Value="InvoiceHeader.InvoiceNo">เลขที่รายการสั่งซื้อ</option>
                                            <option Value="TradeOwner.ACode">A-Code</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='orderlist';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (diverror_Visible)
            {
                <div id="diverror" class="alert alert-danger" role="alert">@lblMsg</div>
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (hplExportLot_Visible)
                        {
                            <div id="hplExport" class="btn btn-default" @onclick=OpenExportLotModal><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</div>
                        }
                        @if (hplExport_Visible)
                        {

                            <div ID="hplExport" runat="server" class="btn btn-default" @onclick=btnExport_Click><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</div>
                        }
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="13%">เลขที่รายการสั่งซื้อ</th>
                                    <th width="10%">วันที่สั่งซื้อ</th>
                                    <th width="10%">เขต</th>
                                    <th width="8%">A-CODE</th>
                                    <th width="23%">ชื่อร้านค้า</th>
                                    <th width="8%">CustShopType</th>
                                    <th width="5%">แต้มรวม</th>
                                    <th width="8%">สถานะ</th>
                                    <th width="10%">วันที่สถานะล่าสุด</th>
                                    <th width="5%">คำสั่ง</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var shopitem in searchDataPaged)
                                {
                                    <tr>
                                        <td align="center">
                                            <a href="/orderedit?keyword=@(SearchTxt)&field=@(field_selected)&start=@(StartDate.HasValue ? StartDate.Value.Date.ToString() : "")&end=@(EndDate.HasValue ? EndDate.Value.Date.ToString() : "")&dealer=@(dealerSelected)&status=@(invStatSelected)&act=view&id=@(shopitem.InvoiceNo)">
                                                @shopitem.InvoiceNo
                                            </a>
                                        </td>
                                        <td align="center">@shopitem.InvoiceDate</td>
                                        <td align="center">@shopitem.Site</td>
                                        <td align="center">@shopitem.ACode</td>
                                        <td>@shopitem.ShopName</td>
                                        <td align="center">@shopitem.CustShopType</td>
                                        <td align="center">@shopitem.Point</td>
                                        <td align="center">@shopitem.InvoiceStatusName</td>
                                        <td align="center">@shopitem.EditDate</td>
                                        <td align="center">
                                            @if (shopitem.InvoiceStatusID == 1 || shopitem.InvoiceStatusID == 2)
                                            {
                                                <a href="orderedit?keyword=@(SearchTxt)&field=@(field_selected)&start=@(StartDate.HasValue ? StartDate.Value.Date.ToString() : "")&end=@(EndDate.HasValue ? EndDate.Value.Date.ToString() : "")&dealer=@(dealerSelected)&status=@(invStatSelected)&act=edit&id=@(shopitem.InvoiceNo)">
                                                    <img src="Resource/img/edit.png" class="icon-img">
                                                </a>
                                            }
                                        </td>
                                    </tr>
                                }
                                @if (IsEmpty)
                                {
                                    <tr><td align='center' colspan='8'><b>ไม่มีข้อมูล</b></td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}



@code {
    
    [Parameter]
    [SupplyParameterFromQuery]
    public string? keyword { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? field { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? start { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? end { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? dealer { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? status { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? act { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? id { get; set; }



    DateTimeOffset? StartDate { get; set; }
    DateTimeOffset? EndDate { get; set; }
    public string? SearchTxt;
    public string? dealerSelected;
    public string? invStatSelected;
    public string? field_selected = "InvoiceHeader.InvoiceNo";
    public List<ListItem> ShopList = new List<ListItem>();
    public List<ListItem> InvoiceStatusList = new List<ListItem>();
    public List<OrderListSearchData> searchData_iquery = new List<OrderListSearchData>();
    public List<OrderListSearchData> searchDataPaged = new List<OrderListSearchData>();

    public bool diverror_Visible = false;
    public bool hplExportLot_Visible = false;
    public bool hplExport_Visible = false;

    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;


    public string? lblMsg;
    public bool IsEmpty = false;

    // session
    public string session_userid;
    public string session_position;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            await js.InvokeVoidAsync("Orderlist_DocumentReady");
            session_userid = await sessionStorage.GetItemAsync<string>("UserID");
            session_position = await sessionStorage.GetItemAsync<string>("Position");
            this.pageSize = int.Parse(configuration["PageSize"]);
            ShopList = pop.DropDownDealerInvoice(session_position, session_userid);
            InvoiceStatusList = pop.DropDownInvoiceStatus();

            if (!string.IsNullOrWhiteSpace(keyword))
                SearchTxt = keyword;
            if (!string.IsNullOrWhiteSpace(field))
                field_selected = field;
            if (!string.IsNullOrWhiteSpace(start))
                StartDate = DateTimeOffset.Parse(start);
            if (!string.IsNullOrWhiteSpace(end))
                EndDate = DateTimeOffset.Parse(end);
            if (!string.IsNullOrWhiteSpace(dealer))
                dealerSelected = dealer;
            if (!string.IsNullOrWhiteSpace(status))
                invStatSelected = status;

            btnSearch_Click();
        }
        await base.OnAfterRenderAsync(firstRender);
    }


    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("2");
        int chk_authorize2 = await secure.Check_Document_Authorize("2", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
            int Exoort_Per = await secure.Check_Document_Authorize("2", "7");
            if (Exoort_Per == 1)
            {
                //hplExport.Visible = true;
                hplExportLot_Visible = true;
            }
        }
    }


    void btnSearch_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
            if(filtered.Any()){
                IsEmpty = false;
            }
            else{
                IsEmpty = true;
            }
            StateHasChanged();
        }
    }

    IEnumerable<OrderListSearchData> QuerySearch(SHELLREGContext db)
    {
        var q_group = (
            from InvDet in db.InvoiceDetails.Where(t => t.Deleted == false)
            group InvDet.ProductQty by new { InvDet.InvoiceNo }
            into g
            select new { InvoiceNo = g.Key.InvoiceNo, ProductQty = g.Sum() }
        );
        var query = (
            from InvHead in db.InvoiceHeaders
            join InvStat in db.InvoiceStatuses on InvHead.InvoiceStatusId equals InvStat.InvoiceStatusId
            join TrdOwn in db.TradeOwners on InvHead.Acode equals TrdOwn.Acode
            join ggrouped in q_group on InvHead.InvoiceNo equals ggrouped.InvoiceNo

            select new OrderListSearchData()
                {


                    InvoiceNo = InvHead.InvoiceNo,
                    InvoiceDate = InvHead.InvoiceDate,
                    InvoiceDate_Datetime = DateTimeOffset.ParseExact(InvHead.InvoiceDate, "dd/MM/yyyy", null),
                    InvoiceStatusID = InvStat.InvoiceStatusId,
                    InvoiceStatusName = InvStat.InvoiceStatusName,
                    EditDate = InvHead.EditDate,
                    ACode = TrdOwn.Acode,
                    ShopName = TrdOwn.ShopName,
                    Site = TrdOwn.Site,
                    Point = ggrouped.ProductQty,
                    CustShopType = TrdOwn.CustShopType,
                }
        );
        return query.AsEnumerable();
    }

    IEnumerable<OrderListSearchData> Specify(IEnumerable<OrderListSearchData> query)
    {
        var filtered = query;
        if (!string.IsNullOrWhiteSpace(SearchTxt))
        {
            switch (field_selected)
            {
                case "InvoiceHeader.InvoiceNo":
                    {
                        filtered = filtered.Where(t => t.InvoiceNo.Contains(SearchTxt));
                        break;
                    }
                case "TradeOwner.ACode":
                    {
                        filtered = filtered.Where(t => t.ACode.Contains(SearchTxt));
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }
        if (!string.IsNullOrWhiteSpace(dealerSelected))
        {
            filtered = filtered.Where(t => t.ACode == dealerSelected);
        }
        if (!string.IsNullOrWhiteSpace(invStatSelected))
        {
            filtered = filtered.Where(t => t.InvoiceStatusID == int.Parse(invStatSelected));
        }
        if (StartDate != null)
        {
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date >= StartDate.Value.Date);
        }
        if (EndDate != null)
        {
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date <= EndDate.Value.Date);
        }
        return filtered;
    }

    void SetData(IEnumerable<OrderListSearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void btnExport_Click()
    {

                        //MENGGIEUNDONE

        // โค้ดเก่าคอมเม้น visible ไว้ น่าจะไม่ได้ใช้
    }

}


<div class="modal @ExportLotModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@ExportLotModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@CloseExportLotModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div id="divexcel">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">&nbsp;</div>
                        <div class="col-md-8">
                            <div class="radio radio-success">
                                @*<asp:RadioButton id="rdoExportExcel"  Text="excel file" GroupName="export" Checked="true" />*@
                                <input type="radio" id="" checked />excel file
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@CloseExportLotModal">ยกเลิก</button></div>
                        <div class="col-md-3"><button type="button" id="btnExportLot" @onclick=@btnExportLot_Click class="btn btn-success btn-block login-button">ตกลง</button></div>
                    </div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}

@code {
    public string ExportLotModalDisplay = "none;";
    public string ExportLotModalClass = "";
    public bool ShowBackdrop = false;
    private void OpenExportLotModal()
    {
        ExportLotModalDisplay = "block;";
        ExportLotModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseExportLotModal()
    {
        ExportLotModalDisplay = "none";
        ExportLotModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async Task btnExportLot_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var inv_grp = (
                from InvDet in db.InvoiceDetails.Where(t => t.Deleted == false)

                        //MENGGIEUNDONE

                group InvDet.ProductQty by new { InvDet.InvoiceNo, InvDet.ProductQty } //CurrentPoint
                into g
                select new { InvoiceNo = g.Key.InvoiceNo, CurrentPoint = 0 * g.Key.ProductQty }
            );

            var filtered_INVHeader = db.InvoiceHeaders.Where(t => !string.IsNullOrWhiteSpace(t.InvoiceNo));
            var filtered_INVStatus = db.InvoiceStatuses.Where(t => true);
            var filtered_TradeOwner = db.TradeOwners.Where(t => true);

            if (!string.IsNullOrWhiteSpace(invStatSelected))
            {
                filtered_INVStatus = filtered_INVStatus.Where(t => t.InvoiceStatusId == int.Parse(invStatSelected));
            }
            if (session_position == "DSM")
            {
                filtered_TradeOwner = filtered_TradeOwner.Where(t => t.Dsmid == session_userid);
            }
            else if (session_position == "DSR")
            {
                filtered_TradeOwner = filtered_TradeOwner.Where(t => t.Dsrid == session_userid);
            }
            else if (session_position == "OBAM")
            {
                filtered_TradeOwner = filtered_TradeOwner.Where(t => t.Obamid == session_userid);
            }

            if (!string.IsNullOrWhiteSpace(SearchTxt))
            {
                switch (field_selected)
                {
                    case "InvoiceHeader.InvoiceNo":
                        {
                            filtered_INVHeader = filtered_INVHeader.Where(t => t.InvoiceNo.Contains(SearchTxt));
                            break;
                        }
                    case "TradeOwner.ACode":
                        {
                            filtered_TradeOwner = filtered_TradeOwner.Where(t => t.Acode.Contains(SearchTxt));
                            break;
                        }
                    default:
                        {
                            break;
                        }
                }
            }
            if (!string.IsNullOrWhiteSpace(dealerSelected))
            {
                filtered_TradeOwner = filtered_TradeOwner.Where(t => t.Acode == dealerSelected);
            }

            var query = (
                from invh in filtered_INVHeader
                from invd in db.InvoiceDetails.Where(t => t.InvoiceNo == invh.InvoiceNo)
                from invStat in filtered_INVStatus.Where(t => t.InvoiceStatusId == invh.InvoiceStatusId)
                from prd in db.Products.Where(t => t.MaterialCode == invd.MaterialCode)
                from trd in filtered_TradeOwner.Where(t => t.Acode == invh.Acode)
                from invgrp in inv_grp.Where(t => t.InvoiceNo == invh.InvoiceNo).DefaultIfEmpty()
                from lot in db.Lots.Where(t => t.LotNo == invh.LotNo).DefaultIfEmpty()

                select new ExportLotExcelData()
                    {
                        InvoiceNo = invh.InvoiceNo,
                        InvoiceDate = invh.InvoiceDate,
                        InvoiceDate_Datetime = DateTimeOffset.ParseExact(invh.InvoiceDate, "dd/MM/yyyy", null),
                        ACode = trd.Acode,
                        SiteName = trd.SiteName,
                        Site = trd.Site,
                        ShopType = trd.ShopType,
                        Tier = trd.Tier,
                        SalesTextCode = prd.SalesTextCode,
                        MaterialCode = prd.MaterialCode,
                        ProductNameTH = prd.ProductNameTh,
                        ProductQuantity = prd.ProductQuantity,
                        ProductQty = invd.ProductQty,
                        ProductUnit = prd.ProductUnit,
                        ProductPerUnit = prd.ProductPerUnit,
                        InvoiceStatusName = invStat.InvoiceStatusName,
                        EditDate = invh.EditDate,
                        CustShopType = trd.CustShopType,
                        CustSubShopType = trd.CustSubShopType,
                        Point = invgrp.CurrentPoint.HasValue ? invgrp.CurrentPoint.Value : 0,
                        LotNo = lot.LotNo == null ? lot.LotNo : "",
                        LotDate = lot.LotDate == null ? lot.LotDate : "",
                    }
            ).AsEnumerable();

            var filtered = query;

            if (StartDate != null)
            {
                filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
                filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date >= StartDate.Value.Date);
            }
            if (EndDate != null)
            {
                filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
                filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date <= EndDate.Value.Date);
            }

            var xls = new Excel();
            await xls.GenerateOrderExportLotExcelImportDataAsync(js, filtered.ToList(), "export.xlsx");
        }
    }
}