@page "/orderlist"
@inject IJSRuntime jsRuntime
@using BlazorDateRangePicker
@using Shell.Data
@using Shell.Model


<style>
        .title-head h1 {
            margin-top: 50px!important;
        }
</style>
<div>
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/report.png" alt="" />รายการสั่งซื้อน้ำมันครื่องเชลล์</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">ข้อมูลร้านค้า</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-6 rows">
                                    <div class="datepicker input-daterange input-group">
                                        <span class="input-group-addon first-text">จาก - ถึง<i class="fa fa-calendar ifrom" aria-hidden="true"></i></span>
                                        <DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate" />
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select ID="field_select" class="form-control" @bind="dealerSelected">
                                            <option Value="">ชื่อร้านค้า</option>
                                            @foreach (var each in ShopList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select ID="field_select" class="form-control" @bind="invStatSelected">
                                            <option Value="">สถานะ</option>
                                            @foreach (var each in InvoiceStatusList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 rows">
                                    <div class="input-group">
                                        <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                    </div>
                                </div>
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select ID="field_select" class="form-control" @bind="field_selected">
                                            <option Value="InvoiceHeader.InvoiceNo">เลขที่รายการสั่งซื้อ</option>
                                            <option Value="TradeOwner.ACode">A-Code</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" id="submit" class="btn btn-success login-button" @onclick="btnSearch_Click" value="ค้นหา" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='orderlist';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (diverror_Visible)
            {
                <div id="diverror" class="alert alert-danger" role="alert">@lblMsg</div>
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        <div ID="hplExport" class="btn btn-default" Visible="false" @onclick=OpenExportLotModal><i class="glyphicon glyphicon-open-file"></i> นำข้อมูลออก</div>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                             OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="13%">เลขที่รายการสั่งซื้อ</th>
                                    <th width="10%">วันที่สั่งซื้อ</th>
                                    <th width="10%">เขต</th>
                                    <th width="8%">A-CODE</th>
                                    <th width="23%">ชื่อร้านค้า</th>
                                    <th width="8%">CustShopType</th>
                                    <th width="5%">แต้มรวม</th>
                                    <th width="8%">สถานะ</th>
                                    <th width="10%">วันที่สถานะล่าสุด</th>
                                    <th width="5%">คำสั่ง</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var shopitem in searchDataPaged)
                                {
                                    <tr>
                                        <td align="center">
                                            <a href="/orderedit?keyword=P000077&field=InvoiceHeader.InvoiceNo&start=&end=&dealer=&status=&act=view&id=P000077">
                                                @shopitem.InvoiceNo
                                            </a>
                                        </td>
                                        <td align="center">@shopitem.InvoiceDate</td>
                                        <td align="center">@shopitem.Site</td>
                                        <td align="center">@shopitem.ACode</td>
                                        <td>@shopitem.ShopName</td>
                                        <td align="center">@shopitem.CustShopType</td>
                                        <td align="center">@shopitem.Point</td>
                                        <td align="center">@shopitem.InvoiceStatusName</td>
                                        <td align="center">@shopitem.EditDate</td>
                                        <td align="center"><div ID="command" runat="server" Text="-" /></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                             OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
</div>
@code {
    DateTimeOffset? StartDate { get; set; }
    DateTimeOffset? EndDate { get; set; }
    public string? SearchTxt;
    public string? dealerSelected;
    public string? invStatSelected;
    public string? field_selected = "InvoiceHeader.InvoiceNo";
    public List<ListItem>? ShopList;
    public List<ListItem>? InvoiceStatusList;
    public List<OrderlistSearchData> searchData_iquery;
    public List<OrderlistSearchData> searchDataPaged;

    public bool diverror_Visible = false;

    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;


    public string? lblMsg;


    protected override void OnInitialized()
    {
        this.pageSize = int.Parse(configuration["PageSize"]);
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
        }
        ShopList = DropDownDealerInvoice();
        InvoiceStatusList = DropDownInvoiceStatus();
        /*
        if (Request.QueryString["keyword"] != null)
        keyword.Text = Request.QueryString["keyword"];
        if (Request.QueryString["field"] != null)
        field_select.SelectedValue = Request.QueryString["field"];
    if (Request.QueryString["start"] != null)
        start_date.Text = Request.QueryString["start"];
        if (Request.QueryString["end"] != null)
        end_date.Text = Request.QueryString["end"];
    if (Request.QueryString["dealer"] != null)
        dealer.SelectedValue = Request.QueryString["dealer"];
    if (Request.QueryString["status"] != null)
        invoicestatus.SelectedValue = Request.QueryString["status"];
    */
    }

    List<ListItem> DropDownDealerInvoice()
    {
        using (var db = new SHELLREGContext())
        {
            var tradefilter_before = db.TradeOwners.Where(t1 => !string.IsNullOrWhiteSpace(t1.Acode));
            IQueryable<TradeOwner> tradefilter_after;
            //user Position
            var user_Position = "DSR";
            var user_id = "00000001";
            if (user_Position == "DSR")
            {
                tradefilter_after = tradefilter_before.Where(t => t.Dsrid == user_id);
            }
            else if (user_Position == "DSM")
            {
                tradefilter_after = tradefilter_before.Where(t => t.Dsmid == user_id);
            }
            else if (user_Position == "OBAM")
            {
                tradefilter_after = tradefilter_before.Where(t => t.Obamid == user_id);
            }
            else
            {
                tradefilter_after = tradefilter_before;
            }
            var query = (
                from TO in tradefilter_after
                join Inv in db.InvoiceHeaders on TO.Acode equals Inv.Acode
                group TO by new { TO.Acode, TO.ShopName } into g
                select new ListItem()
                    {
                        text = g.Key.ShopName,
                        value = g.Key.Acode
                    }
            );
            return query.ToList();
        }
    }

    List<ListItem> DropDownInvoiceStatus()
    {
        using (var db = new SHELLREGContext())
        {
            var query = (
                from InvStat in db.InvoiceStatuses.Where(t => t.InvoiceStatusId != null)
                select new ListItem()
                    {
                        text = InvStat.InvoiceStatusName,
                        value = InvStat.InvoiceStatusId.ToString()
                    }
            );
            return query.ToList();
        }
    }

    void btnSearch_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
        }
    }

    IEnumerable<OrderlistSearchData> QuerySearch(SHELLREGContext db)
    {
        var q_group = (
            from InvDet in db.InvoiceDetails.Where(t => t.Deleted == false)
            group InvDet.ProductQty by new { InvDet.InvoiceNo }
            into g
            select new { InvoiceNo = g.Key.InvoiceNo, ProductQty = g.Sum() }
        );
        var query = (
            from InvHead in db.InvoiceHeaders
            join InvStat in db.InvoiceStatuses on InvHead.InvoiceStatusId equals InvStat.InvoiceStatusId
            join TrdOwn in db.TradeOwners on InvHead.Acode equals TrdOwn.Acode
            join ggrouped in q_group on InvHead.InvoiceNo equals ggrouped.InvoiceNo

            select new OrderlistSearchData()
                {
                    total = 0,
                    Rows = 0,
                    InvoiceNo = InvHead.InvoiceNo,
                    InvoiceDate = InvHead.InvoiceDate,
                    InvoiceDate_Datetime = DateTimeOffset.ParseExact(InvHead.InvoiceDate, "dd/MM/yyyy", null),
                    InvoiceStatusID = InvStat.InvoiceStatusId,
                    InvoiceStatusName = InvStat.InvoiceStatusName,
                    EditDate = InvHead.EditDate,
                    ACode = TrdOwn.Acode,
                    ShopName = TrdOwn.ShopName,
                    Site = TrdOwn.Site,
                    Point = ggrouped.ProductQty,
                    CustShopType = TrdOwn.CustShopType,
                }
        );
        return query.AsEnumerable();
    }

    IEnumerable<OrderlistSearchData> Specify(IEnumerable<OrderlistSearchData> query)
    {
        var filtered = query;
        if (!string.IsNullOrWhiteSpace(SearchTxt))
        {
            switch (field_selected)
            {
                case "InvoiceHeader.InvoiceNo":
                    {
                        filtered = filtered.Where(t => t.InvoiceNo.Contains(SearchTxt));
                        break;
                    }
                case "TradeOwner.ACode":
                    {
                        filtered = filtered.Where(t => t.ACode.Contains(SearchTxt));
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }
        if (!string.IsNullOrWhiteSpace(dealerSelected))
        {
            filtered = filtered.Where(t => t.ACode == dealerSelected);
        }
        if (!string.IsNullOrWhiteSpace(invStatSelected))
        {
            filtered = filtered.Where(t => t.InvoiceStatusID == int.Parse(invStatSelected));
        }
        if (StartDate != null)
        {
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue);
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.Value.Date >= StartDate.Value.Date);
        }
        if (EndDate != null)
        {
            filtered = filtered.Where(t => t.InvoiceDate_Datetime.HasValue ? (t.InvoiceDate_Datetime.Value.Date <= EndDate.Value.Date) : false);
        }
        return filtered;
    }

    void SetData(IEnumerable<OrderlistSearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

}


<div class="modal @ExportLotModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@ExportLotModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@CloseExportLotModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div id="divexcel">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">&nbsp;</div>
                        <div class="col-md-8">
                            <div class="radio radio-success">
                                @*<asp:RadioButton ID="rdoExportExcel" runat="server" Text="excel file" GroupName="export" Checked="true" />*@
                                <input type="radio" id="" checked />excel file
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@CloseExportLotModal">ยกเลิก</button></div>
                        <div class="col-md-3"><button type="button" ID="btnExportLot" @onclick=@btnExportLot_Click class="btn btn-success btn-block login-button">ตกลง</button></div>
                    </div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}

@code {
    public string ExportLotModalDisplay = "none;";
    public string ExportLotModalClass = "";
    public bool ShowBackdrop = false;
    private void OpenExportLotModal()
    {
        ExportLotModalDisplay = "block;";
        ExportLotModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseExportLotModal()
    {
        ExportLotModalDisplay = "none";
        ExportLotModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public void btnExportLot_Click()
    {

    }
}