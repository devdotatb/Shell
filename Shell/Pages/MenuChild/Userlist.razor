@page "/userlist"

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />

@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
    <br />
    <br />
    <center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/config.png" alt="" />ทะเบียนผู้ใช้งานระบบ</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">ข้อมูลผู้ใช้งานระบบ</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="row">
                                        <div class="col-md-6 rows">
                                            <div class="input-group">
                                                <input type="text" id="keyword" class="form-control" placeholder="พิมพ์ค้นหา" @bind="SearchTxt" />
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="field_select" class="form-control" @bind="field_selected">
                                                    <option Value="UserID">รหัสผู้ใช้</option>
                                                    <option Value="Fullname">ชื่อผู้ใช้</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-3 rows">
                                            <div class="input-group">
                                                <select id="status" class="form-control" @bind="statusSelected">
                                                    <option Value="">สถานะ</option>
                                                    <option Value="active">active</option>
                                                    <option Value="inactive">inactive</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='userlist';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (btnCreate_Visible)
                        {
                            <a id="btnCreate" href="/useredit?keyword=@(SearchTxt)&field=@(field_selected)&status=@(statusSelected)&act=add&id="><img src="Resource/img/icon-add.png" /></a>
                        }
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="15%">รหัสผู้ใช้งาน</th>
                                    <th width="30%">ชื่อผู้ใช้งาน</th>
                                    <th width="10%">ตำแหน่ง</th>
                                    <th width="20%">เบอร์โทร</th>
                                    <th width="10%">สถานะ</th>
                                    <th width="5%">คำสั่ง</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var each_data in searchDataPaged)
                                {
                                    <tr>
                                        <td align="center">
                                            <a href="/useredit?keyword=@(SearchTxt)&field=@(field_selected)&status=@(statusSelected)&act=view&id=@(each_data.UserID)">
                                                @each_data.UserID
                                            </a>
                                        </td>
                                        <td>@each_data.Fullname</td>
                                        <td>@each_data.Position</td>
                                        <td>@each_data.Phone</td>
                                        <td align="center"><span style="color:Blue;">@each_data.Status</span></td>
                                        <td align="center">
                                            @if (each_data.Status == "active")
                                            {
                                                <a href="/useredit?keyword=@(SearchTxt)&field=@(field_selected)&status=@(statusSelected)&act=edit&id=@(each_data.UserID)">
                                                    <img src="Resource/img/edit.png" class="icon-img" />
                                                </a>
                                            }
                                        </td>
                                    </tr>
                                }
                                @if (IsEmpty)
                                {
                                    <tr><td align='center' colspan='6'><b>ไม่มีข้อมูล</b></td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}


@code {
    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;

    public List<UserListSearchData> searchData_iquery = new List<UserListSearchData>();
    public List<UserListSearchData> searchDataPaged = new List<UserListSearchData>();

    public string field_selected = "UserID";
    public string statusSelected = "";
    public string? SearchTxt;
    public bool IsEmpty = false;

    public bool btnCreate_Visible = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? keyword { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? field { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? status { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            this.pageSize = int.Parse(configuration["PageSize"]);

            if (!string.IsNullOrWhiteSpace(keyword))
                SearchTxt = keyword;
            if (!string.IsNullOrWhiteSpace(field))
                field_selected = field;
            if (!string.IsNullOrWhiteSpace(status))
                statusSelected = status;

            btnSearch_Click();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("3");
        int chk_authorize2 = await secure.Check_Document_Authorize("4", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
            int Create_Per = await secure.Check_Document_Authorize("4", "1");
            if (Create_Per == 1)
            {
                btnCreate_Visible = true;
            }
        }
    }


    IEnumerable<UserListSearchData> QuerySearch(SHELLREGContext db)
    {
        var query = (
            from Users in db.Users.Where(t1 => t1.UserId != "")

            select new UserListSearchData()
                {


                    UserID = Users.UserId,
                    Fullname = Users.Fullname,
                    Position = Users.Position,
                    Phone = Users.Phone,
                    Status = Users.Status,
                }
        );
        return query.AsEnumerable();
    }

    IEnumerable<UserListSearchData> Specify(IEnumerable<UserListSearchData> query)
    {
        var filtered = query;
        if (!string.IsNullOrWhiteSpace(SearchTxt))
        {
            switch (field_selected)
            {
                case "UserID":
                    {
                        filtered = filtered.Where(t => t.UserID.Contains(SearchTxt));
                        break;
                    }
                case "Fullname":
                    {
                        filtered = filtered.Where(t => t.Fullname.Contains(SearchTxt));
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }
        if (!string.IsNullOrWhiteSpace(statusSelected))
        {
            filtered = filtered.Where(t => t.Status.Contains(statusSelected));
        }
        return filtered;
    }

    void SetData(IEnumerable<UserListSearchData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void btnSearch_Click()
    {
        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);
            if (filtered.Any())
            {
                IsEmpty = false;
            }
            else
            {
                IsEmpty = true;
            }
            StateHasChanged();
        }
    }


    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }
}

