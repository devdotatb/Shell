@page "/lotsync"
<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/sb-admin.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
@*<link href="Resource/css/bootstrap-datepicker.css" rel="stylesheet" type="text/css" />*@
<link href="Resource/css/cos.css" rel="stylesheet" type="text/css" />


@code {
    private bool IsAuthorizedSucceed = false;

    async Task history_back()
    {
        await js.InvokeAsync<object>("test.historyGo", -1);
    }
}
@if (IsAuthorizedSucceed == false)
{
    <br />
    <br />
    <center>ท่านไม่ได้รับสิทธิในการใช้งานส่วนนี้ <a href="" @onclick="history_back" @onclick:preventDefault>ย้อนกลับ</a></center>
}
@if (IsAuthorizedSucceed == true)
{
    <div id="page-wrapper">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12 title-head">
                    <h1><img src="Resource/img/report.png" alt="" />Error Lot รายการที่ไม่ถูกส่งไประบบ SHARE</h1>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">รายการ Error Lot</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-3 rows">
                                    <div class="input-group">
                                        <select id="field_select" class="form-control" @bind="lotnoSelected">
                                            <option Value="">Lot No.</option>
                                            <option Value="0">ยังไม่ได้ Gen Lot No.</option>
                                            @foreach (var each in LotNoList)
                                            {
                                                <option Value="@each.value">@each.text</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="row searchs">
                                        <div class="col-md-6">
                                            <input type="button" value="ค้นหา" id="btnSearch" class="btn btn-success" @onclick="btnSearch_Click" />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="button" class="btn btn-default" value="เคลียร์" onclick="location.href='lotsync';" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (divsuccess_Visible)
            {
                <div id="divsuccess" class="alert alert-success" role="alert">@lblSuccess</div>
            }
            @if (diverror_Visible)
            {
                <div id="diverror" class="alert alert-danger" role="alert">@lblMsg</div>
            }
            <div class="row">
                <div class="col-md-12">
                    <div class="table-page text-right form-inline">
                        @if (chkSync_Visible)
                        {
                            <input type="checkbox" id="chkSync" Text="" class="checkbox checkbox-success" @bind="chkSync_Checked" />
                            <label for="chkSync">All</label>
                        }
                        @if (hplSync_Visible)
                        {
                            <button id="hplSync" class="btn btn-success" @onclick="OpenSyncModal">Sync Data</button>
                        }
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
            <div class="row">
                <div class="col-md-12">
                    <div id="no-more-tables">
                        <table class="table-bordered table-striped table-condensed tables">
                            <thead id="thContent">
                                <tr>
                                    <th width="20%">Lot No.</th>
                                    <th width="20%">เลขที่รายการสั่งซื้อ</th>
                                    <th width="20%">ResponseCode</th>
                                    <th width="40%">Msg</th>
                                </tr>
                            </thead>
                            <tbody id="tbContent">
                                @foreach (var eachitem in searchDataPaged)
                                {
                                    <tr>
                                        <td align="center">@eachitem.LotNo</td>
                                        <td align="center">@eachitem.InvoiceNo</td>
                                        <td align="center">@eachitem.lblResponseCode"</td>
                                        <td>@eachitem.lblMsg</td>
                                    </tr>
                                }
                                @if (IsEmpty)
                                {
                                    <tr><td align='center' colspan='4'><b>ไม่มีข้อมูล</b></td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <PagingComponent TotalRow="searchData_iquery.Count()" ComponentPageNumber="pageNumber" ComponentPageSize="pageSize"
                         OnChange="@((args)=> PagingCalledBack(args.Item1,args.Item2))"></PagingComponent>
        </div>
    </div>
}


@code {
    //html
    public string lblSuccess { get; set; }
    public string lblMsg { get; set; }
    public string lblResponseCode { get; set; }
    public string? lotnoSelected { get; set; }
    public bool chkSync_Checked = false;
    public List<ListItem> LotNoList = new List<ListItem>();
    //html visible
    public bool divsuccess_Visible = false;
    public bool diverror_Visible = false;
    public bool chkSync_Visible = false;
    public bool hplSync_Visible = false;
    public bool IsEmpty = false;

    [Inject]
    private IConfiguration configuration { get; set; }
    private int pageSize = 5;
    private int pageNumber = 1;
    private int totalPage;

    public List<LotSyncSeachData> searchData_iquery = new List<LotSyncSeachData>();
    public List<LotSyncSeachData> searchDataPaged = new List<LotSyncSeachData>();


    //

    string keywords = "";
    string jsondata = "", content = "";
    string curr_date = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year;
    string curr_time = DateTime.Now.ToString("HH:mm:ss");
    string curr_times = DateTime.Now.ToString("HH:mm");
    string curr_date_full = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year + " " + DateTime.Now.ToString("HH:mm:ss");


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!(await secure.Page_Init()))
            {
                return;
            }
            await Authorize();
            this.pageSize = int.Parse(configuration["PageSize"]);
            btnSearch_Click();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Authorize()
    {
        int chk_authorize1 = await secure.Check_Menu_Authorize("2");
        int chk_authorize2 = await secure.Check_Document_Authorize("3", "3");
        if (chk_authorize1 == 0 || chk_authorize2 == 0)
        {
            IsAuthorizedSucceed = false;
        }
        else
        {
            IsAuthorizedSucceed = true;
        }
    }

    async Task btnSearch_Click()
    {
        int Create_Per = await secure.Check_Document_Authorize("3", "1");
        if (Create_Per == 1)
        {
            hplSync_Visible = true;
            chkSync_Visible = true;
        }

        using (var db = new SHELLREGContext())
        {
            var query = this.QuerySearch(db);
            var filtered = this.Specify(query);
            this.SetData(filtered);

            if (filtered.Count() > 0)
            {
                IsEmpty = false;
            }
            else
            {
                IsEmpty = true;
                hplSync_Visible = false;
                chkSync_Visible = false;
            }
            StateHasChanged();
        }
    }


    IEnumerable<LotSyncSeachData> QuerySearch(SHELLREGContext db)
    {
        var query = (
            from Product in db.Products.Where(t1 => false)

            select new LotSyncSeachData()
            {
            }
        ).AsEnumerable();
        return query;
    }

    IEnumerable<LotSyncSeachData> Specify(IEnumerable<LotSyncSeachData> query)
    {
        var filtered = query;
        return filtered;
    }

    void SetData(IEnumerable<LotSyncSeachData> query)
    {
        this.pageNumber = 1;
        this.searchData_iquery = query.ToList();
        this.totalPage = (int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }

    void PagingCalledBack(int PageChage, bool isSliding)
    {
        if (isSliding)
        {
            pageNumber = PageChage;
        }
        else
        {
            pageNumber += PageChage;
        }
        this.searchDataPaged = this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();
    }
}



@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}
@code {
    public bool ShowBackdrop = false;
}


<div class="modal @SyncModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@SyncModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="CloseSyncModal"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div id="divgenlot">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 rows">
                            <div class="input-group text-center">
                                <label class="col-form-label">ต้องการ Sync Data ใช่หรือไม่?</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="CloseSyncModal">ยกเลิก</button></div>
                        <div class="col-md-3"><button ID="btnSync" @onclick="btnSync_Click" class="btn btn-success btn-block login-button linkload">ตกลง</button></div>
                    </div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>

@code {
    //Modal OPEN CLOSE CHANGEVIEW
    public string SyncModalDisplay = "none;";
    public string SyncModalClass = "";

    private void OpenSyncModal()
    {
        SyncModalDisplay = "block;";
        SyncModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void CloseSyncModal()
    {
        SyncModalDisplay = "none";
        SyncModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    void btnSync_Click()
    {

                        //MENGGIEUNDONE

        /*
        using (var db = new SHELLREGContext())
        {
            var finding = db.LotsPointLogs.Where(t => !string.IsNullOrWhiteSpace(t.LotNo));
            if (!string.IsNullOrWhiteSpace(lotnoSelected))
            {
                finding = finding.Where(t => t.LotNo == lotnoSelected);
            }
            if (!chkSync_Checked)
            {
                finding = finding.Where(t => t.LogStatus == false);
            }
            foreach (var item in finding)
            {
                jsondata = item.JsonData;
                string ID = item.ID;
                string InvoiceNo = item.InvoiceNo;

                Dictionary<string, string> header = new Dictionary<string, string>();
                try
                {
                string access_token = consys.GetAccessToken();

                JObject rsdata = JObject.Parse(jsondata);
                rsdata["access_token"] = access_token;
                string newjsondata = rsdata.ToString().Replace(@" ", "");

                header.Add("ER-Token", consys.Get_ERToken());
                header.Add("CountryCode", consys.Get_CountryCode());
                header.Add("LanguageCode", consys.Get_LanguageCode());

                    try
                    {
                    content = consys.ApiDataReader(newjsondata, consys.Get_UrlApiEndPoint_addclientorders(), "POST", header).ReadToEnd();
                    JObject rss = JObject.Parse(content);
                    if (rss["ResponseCode"].ToString() == "5000")
                    {
                        string OrderID = rss["Data"]["order_id"].ToString();
                        //sql = string.Format(@"UPDATE InvoiceHeader SET OrderID = '{1}' WHERE InvoiceNo = '{0}'", InvoiceNo, OrderID);
                        var update_finding = db.InvoiceHeaders.Where(t => t.InvoiceNo == InvoiceNo);
                            if (update_finding.Any())
                            {
                                var updating = update_finding.First();
                                updating.OrderID = OrderID;
                            }
                            db.SaveChanges();

                        UpdatePointLog(ID, newjsondata, content, "True");
                    }
                    else
                    {
                        UpdatePointLog(ID, newjsondata, content, "False");
                    }
                    }
                    catch (Exception)
                    {
                        UpdatePointLog(ID, newjsondata, content, "False");
                    }
                }
                catch (Exception)
                {
                    UpdatePointLog(ID, jsondata, "", "False");
                }
            }
        divsuccess_Visible = true;
        lblSuccess = "SUCCESS : Sync Data เสร็จเรียบร้อย";
        btnSearch_Click();
        }
        */
    }
    private void UpdatePointLog(string ID, string JsonData, string ResponseData, string LogStatus)
    {
        using (var db = new SHELLREGContext())
        {

        }

                        //MENGGIEUNDONE

        /*        sql = string.Format("UPDATE LotsPointLog SET JsonData = '{1}', ResponseData = '{2}', LogDate = '{3}', LogStatus = '{4}' WHERE ID = '{0}'"
            , ID, ReplaceText(JsonData), ReplaceText(ResponseData), curr_date_full, LogStatus);
        db.ExecuteNonQuery(sql, ref error);*/
    }

    private string ReplaceText(string txt)
    {
        return txt.Trim().Replace(@"'", "");
    }
}
