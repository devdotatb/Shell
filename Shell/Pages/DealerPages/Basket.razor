@page "/basket"

@using System.Text
@using System.Web
@using Shell.Data
@using Shell.Model
@using Shell.Service
@inject IclsDefault my_clsDefault
@inject IResful resf
@inject IJSRuntime js

<link href="Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
<link href="Resource/css/cos_mobile.css" rel="stylesheet" type="text/css" />
<style>
    #wrapper {
        padding-left: unset;
        padding-top: unset;
    }
</style>
<div id="wrapper" hidden="@(!wrapper_Visible)">
    <nav class="navbar-fixed-top" role="navigation">
        <div class="navbar-header navbar-header-basket">
            <div class="navbar-basket">ตะกร้าสินค้า</div>
            <a id="hplback" href="/shopping?uid=@uid&q=testq" class="navbar-back"><img src="Resource/img/icon-back.png" /></a>
        </div>
    </nav>
    <div class="main-head">
        <div class="lookup-itemlist">
            <div id="itemlist">
                @{
                    alllist = 0;
                }
                @foreach (var eachitem in searchDataPaged)
                {
                    alllist += eachitem.ProductQty.Value;
                    <div class="main-item" id="item @eachitem.MaterialCode">
                        <div class="row">
                            <div class="col-xs-6 col-md-2"><a data-toggle="modal" data-target="#alert@eachitem.MaterialCode"><img src="@eachitem.ProductPic" class="img-responsive" /></a></div>
                            <div class="col-xs-6 col-md-10 item-desc">
                                <div class="row">
                                    <div class="col-md-7">
                                        <p>@((MarkupString)eachitem.ProductName)</p>
                                        @if (@eachitem.ProductSubPic != "")
                                        {
                                            <a class="btn btn-default" style="background-color:#@eachitem.ProductSubPic;border-color:#@eachitem.ProductSubPic;color:#fff;font-size:12px;margin-bottom:5px;">@eachitem.ProductSub</a>
                                        }
                                        @if (@eachitem.CurrentPoint != 0 || @eachitem.CurrentBonusPoint != 0)
                                        {
                                            <div class="product-point" id="point @eachitem.MaterialCode" shareid="@eachitem.SHAREID" cpoint="@eachitem.CurrentPoint" cbpoint="@eachitem.CurrentBonusPoint">
                                                @if (eachitem.CurrentPoint != 0)
                                                {
                                                    <a class="btn btn-default" style="background-color:#fff;border-color:#fff;color:#D82B1E;font-size:12px;">@eachitem.CurrentPoint แต้ม</a>
                                                    <div>&nbsp;</div>
                                                    <div>&nbsp;</div>
                                                    <div>&nbsp;</div>
                                                }
                                                @if (eachitem.CurrentBonusPoint != 0)
                                                {
                                                    <a class="btn btn-default" style="background-color:#D82B1E;border-color:#D82B1E;color:#fff;font-size:12px;">@eachitem.CurrentBonusPoint แต้มพิเศษ</a>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="col-md-5">
                                        <div class="product-quantity text-center">
                                            <input disabled style="opacity:1;" type="number" class="product-text product-num keyInteger" id="num @eachitem.MaterialCode" @bind="eachitem.ProductQty" />
                                            <div class="qty-sub qty-button" @onclick="() => GetSub(eachitem)"><span>-</span></div>
                                            <div class="qty-add qty-button" @onclick="() => GetLimit(eachitem)"><span>+</span></div>
                                            <div class="product-unit">@eachitem.ProductUnit</div>
                                        </div>
                                        <div class="row product-detail">
                                            <div class="col-xs-6 col-md-4 product-detail-left"><a class="btn btn-default btn-block" @onclick="() => OpenDescriptionModal(eachitem.ProductDes)">รายละเอียด</a></div>
                                            <div class="col-xs-6 col-md-4 product-detail-right"><a class="btn btn-success btn-block" @onclick="() => RemoveProductShopping(eachitem)">ลบ</a></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div id="loaditem" class="text-center" style="display:none;"><img src="Resource/img/loading-circle.gif" /></div>
    </div>
    <nav class="navbar-fixed-bottom" role="navigation">
        <div class="main-result">
            <div class="row">
                <div class="col-xs-6 text-result">รายการทั้งหมด</div>
                <div class="col-xs-6 text-result text-right" id="alllist">
                    @alllist
                </div>
            </div>
            <div id="detaillist">
                @foreach (var eachdict in xmdfcp)
                {
                    <div class="row">
                        <div class="col-xs-6">@eachdict.Key</div>
                        <div class="col-xs-6 text-right productqty" id="unit @eachdict.Key">@eachdict.Value</div>
                    </div>
                }
            </div>
        </div>
        <div class="main-result" id="mainpoint" hidden="@cpoint > 0 || @cbpoint">
            <div class="row">
                <div class="col-xs-6 text-result">รายการแต้มทั้งหมด</div>
                <div class="col-xs-6 text-result text-right" id="allpoint">
                    @allpoint
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6">แต้ม</div>
                <div class="col-xs-6 text-right productqty" id="cpoint">
                    @cpoint
                </div>
            </div>
            <div class="row">
                <div class="col-xs-6">แต้มพิเศษ</div>
                <div class="col-xs-6 text-right productqty" id="cbpoint">
                    @cbpoint
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12">
                <button id="btnsavecheck" class="btn btn-block btnyellow" @onclick="@OpenSaveModal" disabled="@btnsavecheck_disable" style="border-radius:0;">สั่งสินค้า</button>
            </div>
        </div>
    </nav>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? uid { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? q { get; set; }

    public string curr_date;
    public string curr_time;

    public string hdfUID; // request UID == tradeowner.lineuid
    public string hdfShoppingNo; // current Shopping NO.
    public string hdfACode; // founded tradeowner's Acode

    public int alllist;
    public int allpoint;
    public int cpoint;
    public int cbpoint;

    public bool wrapper_Visible = true;

    bool btnsavecheck_disable = true;


    public List<BasketSeachData> searchData;
    public List<BasketSeachData> searchDataPaged = new List<BasketSeachData>();
    Dictionary<string, int> xmdfcp = new Dictionary<string, int>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("Basket_DocumentReady");
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async void OnInitialized()
    {
        curr_date = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year;
        curr_time = DateTime.Now.ToString("HH:mm:ss");
        byte[] data = Convert.FromBase64String(uid);
        hdfUID = Encoding.UTF8.GetString(data);

        using (var db = new SHELLREGContext())
        {
            var tradown = db.TradeOwners.Where(t => t.LineUid == hdfUID && t.Status == "active");
            if (tradown.Any())
            {
                var founded_trdown = tradown.First();
                hdfACode = founded_trdown.Acode;
                hdfShoppingNo = await GetShoppingNo(db, hdfACode);
            }
        }
        searchingPack();
    }
    void searchingPack()
    {
        btnsavecheck_disable = true;
        var filtered = resf.GetProductShoppingCart(hdfShoppingNo);
        this.SetData(filtered);
        btnsavecheck_disable = false;
    }

    void SetData(List<BasketSeachData> query)
    {
        this.searchData = query;
        //this.totalPage = query.Count();//(int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData;//this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

        reloadDict();

    }
    void reloadDict()
    {
        xmdfcp = new Dictionary<string, int>();
        foreach (var each in searchDataPaged)
        {
            if (!xmdfcp.ContainsKey(each.ProductUnit))
            {
                xmdfcp.Add(each.ProductUnit, 0);
            }
            xmdfcp[each.ProductUnit] += each.ProductQty.Value;
        }
    }
    async Task<string> GetShoppingNo(SHELLREGContext db, string sACode)
    {
        string ShoppingNo = "";
        var shopping_Header_needed = db.ShoppingHeaders.Where(t => t.Acode == sACode && t.ShoppingUse != true);
        if (shopping_Header_needed.Any())
        {
            var founded_header = shopping_Header_needed.First();
            ShoppingNo = founded_header.ShoppingNo;
        }
        else
        {
            ShoppingNo = await my_clsDefault.GenShoppingNO();
            db.ShoppingHeaders.Add(new ShoppingHeader()
                {
                    ShoppingNo = ShoppingNo,
                    Acode = sACode,
                    ShoppingUse = false,
                    AddDate = curr_date,
                    AddTime = curr_time,
                });
            db.SaveChanges();
        }
        return ShoppingNo;

    }
    void GetSub(BasketSeachData eachitem)
    {
        if (eachitem.ProductQty > 0)
        {
            eachitem.ProductQty--;
            EditProductShopping(eachitem.MaterialCode, eachitem.ProductQty.Value, -1);
        }
    }
    void GetLimit(BasketSeachData eachitem)
    {
        //qualitylimit = limit
        //qualituunit = unite
        if (eachitem.ProductQty >= eachitem.ProductQuantityLimit.Value)
        {
            eachitem.ProductQty = eachitem.ProductQuantityLimit.Value;
            this.OpenErrorDialog("ขออภัย ท่านไม่สามารถสั่งซื้อสินค้ารายการนี้ได้เกิน " + eachitem.ProductQuantityLimit + " " + eachitem.ProductUnit);
        }
        else
        {
            eachitem.ProductQty++;
            EditProductShopping(eachitem.MaterialCode, eachitem.ProductQty.Value, 1);
        }
    }
    void EditProductShopping(string matcode, int current_qty, int changed)
    {
        resf.EditProductShopping(hdfShoppingNo, matcode, current_qty);
        reloadDict();
    }
    void RemoveProductShopping(BasketSeachData eachitem)
    {
        resf.RemoveProductShopping(hdfShoppingNo, eachitem.MaterialCode);
        searchingPack();
    }
}

<ModalDialog @ref="modal" OnClose="@OnErrorDialogClose"></ModalDialog>
    @code {

    private ModalDialog modal { get; set; }
    private void OnErrorDialogClose(bool accepted)
    {
        //StateHasChanged();
    }
    private void OpenErrorDialog(string txt)
    {
        modal.Open(txt);
        //StateHasChanged();
    }
    }




@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}
@code {
    public bool ShowBackdrop = false;
}

<div class="modal @DescriptionModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@DescriptionModalDisplay">
    <div class="modal-dialog" style="margin-top:70px;">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" @onclick="@CloseDescriptionModal"><span aria-hidden="true">&times;</span></button>
                <div class="row" style="margin-top:25px;">
                    <div class="col-xs-12">@((MarkupString)DescriptionModal_text)</div>
                </div>
            </div>
        </div>
    </div>
</div>

    @code {
    //Modal OPEN CLOSE CHANGEVIEW
    public string DescriptionModalDisplay = "none;";
    public string DescriptionModalClass = "";
    public string DescriptionModal_text = "";

    private void OpenDescriptionModal(string str)
    {
        DescriptionModal_text = str;
        DescriptionModalDisplay = "block;";
        DescriptionModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void CloseDescriptionModal()
    {
        DescriptionModalDisplay = "none";
        DescriptionModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    }




<div class="modal @SaveModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@SaveModalDisplay">
    <div class="modal-dialog" style="margin-top:200px;">
        <div class="modal-content">
            <div class="modal-body">
                <center><h4>คุณยืนยันการสั่งซื้อหรือไม่</h4></center>
                <div>&nbsp;</div>
                <div class="row">
                    <div class="col-xs-6"><button class="btn btn-danger btn-block btngary" @onclick="@CloseSaveModal">ไม่ใช่</button></div>
                    <div class="col-xs-6"><button id="btnSave" @onclick="@btnSave_Click" class="btn btn-danger btn-block btnyellow">ใช่</button></div>
                </div>
            </div>
        </div>
    </div>
</div>


                    @code {

    public string SaveModalDisplay = "none;";
    public string SaveModalClass = "";

    private void OpenSaveModal()
    {
        SaveModalDisplay = "block;";
        SaveModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void CloseSaveModal()
    {
        SaveModalDisplay = "none";
        SaveModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    async void btnSave_Click()
    {
        string InvoiceNo = await GetInvoiceNo();
        using (var db = new SHELLREGContext())
        {

            db.InvoiceHeaders.Add(new InvoiceHeader()
                {
                    InvoiceNo = InvoiceNo,
                    InvoiceDate = curr_date,
                    ShoppingNo = hdfShoppingNo,
                    Acode = hdfACode,
                    InvoiceStatusId = 1,
                    AddDate = curr_date,
                    AddTime = curr_time,
                    EditDate = curr_date,
                    EditTime = curr_time,
                });

            var list_shopping_detail = db.ShoppingDetails.Where(t => t.ShoppingNo == hdfShoppingNo).ToList();

            foreach (var each in list_shopping_detail)
            {
                db.InvoiceDetails.Add(new InvoiceDetail()
                    {
                        InvoiceNo = InvoiceNo,
                        MaterialCode = each.MaterialCode,
                        ProductQty = each.ProductQty,
                        AddDate = curr_date,
                        AddTime = curr_time,
                        EditDate = curr_date,
                        EditTime = curr_time,
                        //CurrentPoint, CurrentBonusPoint, SHAREID
                    });
            }
            db.SaveChanges();

            wrapper_Visible = false;
            divcorrect_Visible = true;
            // LINE

        }
    }

    private async Task<string> GetInvoiceNo()
    {
        string InvoiceNo = await my_clsDefault.GenInvoiceNo();
        return InvoiceNo;
    }
                    }

<div id="divcorrect" hidden="@(!divcorrect_Visible)">
    <div class="container">
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-6">
                <div class="login-page-img">
                    <img id="Image1" ImageUrl="~/Resource/img/logo-shell-mobile.png" />
                </div>
                <div class="login-page-desc">
                    <div>&nbsp;</div>
                    <p class="text-center">รายการสั่งซื้อของท่านเสร็จสมบูรณ์</p>
                    <div>&nbsp;</div>
                    <div>&nbsp;</div>
                    <div class="text-center"><span>------------------------------</span></div>
                    <div>&nbsp;</div>
                    <div class="text-center"><span>กดปุ่ม “X” มุมบนเพื่อปิดหน้าจอนี้</span></div>
                    <div>&nbsp;</div>
                </div>
            </div>
            <div class="col-md-3"></div>
        </div>
    </div>
    <style type="text/css">
        html, body {
            background: #FED000;
            margin: 0;
        }
    </style>
</div>

@code {
    bool divcorrect_Visible = false;
}