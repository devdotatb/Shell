
    <link href="/Resource/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="/Resource/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
    <link href="/Resource/css/cos_mobile.css" rel="stylesheet" type="text/css" />
<div class="main-head">
    <div class="main-item navbar-title">
        <center><h4><b>รายละเอียดการสั่งซื้อ<br />เลขที่ใบสั่งซื้อ @lblInvoiceNo</b></h4></center>
        <div class="row">
            <div class="col-xs-6"><b>รหัสร้านค้า (A-Code)</b></div>
            <div class="col-xs-6 text-right">@lblACode</div>
        </div>
        <div class="row">
            <div class="col-xs-6"><b>ชื่อร้านค้า</b></div>
            <div class="col-xs-6 text-right">@lblShopName</div>
        </div>
        <div class="row">
            <div class="col-xs-6"><b>วันที่สั่งซื้อ</b></div>
            <div class="col-xs-6 text-right">@lblInvoiceDate</div>
        </div>
    </div>
    <div class="lookup-itemlist">
        <div id="itemlist">
            @{
                alllist = 0;
            }
            @foreach (var eachitem in searchDataPaged)
            {
                alllist += eachitem.ProductQty.Value;
                <div class="main-item" id="item @eachitem.MaterialCode">
                    <div class="row">
                        <div class="col-xs-6 col-md-2"><a data-toggle="modal" data-target="#alert@eachitem.MaterialCode"><img src="@eachitem.ProductPic" class="img-responsive" /></a></div>
                        <div class="col-xs-6 col-md-10 item-desc">
                            <div class="row">
                                <div class="col-md-7">
                                    <p>@((MarkupString)eachitem.ProductName)</p>
                                    @if (@eachitem.ProductSubPic != "")
                                    {
                                        <a class="btn btn-default" style="background-color:#@eachitem.ProductSubPic;border-color:#@eachitem.ProductSubPic;color:#fff;font-size:12px;margin-bottom:5px;">@eachitem.ProductSub</a>
                                    }
                                    @if (@eachitem.CurrentPoint != 0 || @eachitem.CurrentBonusPoint != 0)
                                    {
                                        <div class="product-point" id="point @eachitem.MaterialCode" shareid="@eachitem.SHAREID" cpoint="@eachitem.CurrentPoint" cbpoint="@eachitem.CurrentBonusPoint">
                                            @if (eachitem.CurrentPoint != 0)
                                            {
                                                <a class="btn btn-default" style="background-color:#fff;border-color:#fff;color:#D82B1E;font-size:12px;">@eachitem.CurrentPoint แต้ม</a>
                                                <div>&nbsp;</div>
                                                <div>&nbsp;</div>
                                                <div>&nbsp;</div>
                                            }
                                            @if (eachitem.CurrentBonusPoint != 0)
                                            {
                                                <a class="btn btn-default" style="background-color:#D82B1E;border-color:#D82B1E;color:#fff;font-size:12px;">@eachitem.CurrentBonusPoint แต้มพิเศษ</a>
                                            }
                                        </div>
                                    }
                                </div>
                                <div class="col-md-5">
                                    <div class="product-quantity text-center">
                                        <input disabled style="opacity:1;" type="number" class="product-text product-num keyInteger" id="num @eachitem.MaterialCode" @bind="eachitem.ProductQty" />
                                        @if (!hdfInvoicecheck)
                                        {
                                            <div class="qty-sub qty-button" @onclick="() => GetSub(eachitem)"><span>-</span></div>
                                            <div class="qty-add qty-button" @onclick="() => GetLimit(eachitem)"><span>+</span></div>
                                        }
                                        <div class="product-unit">@eachitem.ProductUnit</div>
                                    </div>
                                    <div class="row product-detail">
                                        <div class="col-xs-6 col-md-4 product-detail-left"><a class="btn btn-default btn-block" @onclick="() => OpenDescriptionModal(eachitem.ProductDes)">รายละเอียด</a></div>
                                        @if (!hdfInvoicecheck)
                                        {
                                            <div class="col-xs-6 col-md-4 product-detail-right"><a class="btn btn-danger btn-block btnred invremove" @onclick="() => RemoveProductInvoice(eachitem)">ลบ</a></div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    <div id="loaditem" class="text-center" style="display:none;"><img src="/Resource/img/loading-circle.gif" /></div>
</div>
<nav class="navbar-fixed-bottom" role="navigation">
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4">
            <div class="row" style="padding:0 15px;">
                <div class="col-xs-12 text-center"><a ID="hpladd" href="@hpladd_NavigateUrl" class="btn btn-danger btn-block btngary"><i class="fa fa-plus" aria-hidden="true"></i> เพิ่มรายการ</a></div>
            </div>
            <div class="main-result">
                <div class="row">
                    <div class="col-xs-6 text-result">รายการทั้งหมด</div>
                    <div class="col-xs-6 text-result text-right" id="alllist">
                        @alllist
                    </div>
                </div>
                <div id="detaillist">
                    @foreach (var eachdict in xmdfcp)
                    {
                        <div class="row">
                            <div class="col-xs-6">@eachdict.Key</div>
                            <div class="col-xs-6 text-right productqty" id="unit @eachdict.Key">@eachdict.Value</div>
                        </div>
                    }
                </div>
            </div>
            <div class="main-result" id="mainpoint" hidden="@cpoint > 0 || @cbpoint">
                <div class="row">
                    <div class="col-xs-6 text-result">รายการแต้มทั้งหมด</div>
                    <div class="col-xs-6 text-result text-right" id="allpoint">
                        @allpoint
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-6">แต้ม</div>
                    <div class="col-xs-6 text-right productqty" id="cpoint">
                        @cpoint
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-6">แต้มพิเศษ</div>
                    <div class="col-xs-6 text-right productqty" id="cbpoint">
                        @cbpoint
                    </div>
                </div>
            </div>
            <div class="main-status">
                <div class="row">
                    <div class="col-xs-4"><b class="main-status-b">สถานะ</b></div>
                    <div class="col-xs-8">
                        <select id="field_select" class="form-control" @bind="invStatSelected" disabled="@ddlInvoiceStatus_disable">
                            <option Value="">สถานะ</option>
                            @foreach (var each in ddlInvoiceStatus)
                            {
                                <option Value="@each.value">@each.text</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="row" style="padding:0 15px 5px;">
                <div class="col-xs-12 text-center">
                    @if (!btnsavecheck_hide)
                    {
                        <a id="btnsavecheck" class="btn btn-block btnyellow" @onclick="@OpenSaveModal" disabled="@btnsavecheck_disable">บันทึก</a>
                    }
                </div>
            </div>
        </div>
    </div>
</nav>

@page "/order/{invoice_route?}"
@using System.Text
@using System.Web
@using Shell.Data
@using Shell.Data.ExcelData
@using Shell.Data.SearchData
@using Shell.Model
@using Shell.Service
@inject NavigationManager Navigation
@inject IJSRuntime js
@inject ISecure secure
@inject IclsDefault my_clsDefault
@inject IPopulate pop
@inject IResful resf

@code {

    [Parameter]
    public string? invoice_route { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? uid { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string? q { get; set; }

    string curr_date = DateTime.Now.ToString("dd/MM/") + DateTime.Now.Year;
    string curr_time = DateTime.Now.ToString("HH:mm:ss");
    string curr_times = DateTime.Now.ToString("HH:mm");

    // Visible Disable
    public bool ddlInvoiceStatus_disable = false;
    public bool btnsavecheck_disable = false;
    public bool btnsavecheck_hide = false;

    // HDF
    public string hdfUID;
    public string hdfInvoiceNo;
    public string lblInvoiceNo;
    public string hpladd_NavigateUrl;
    public string hdfUserID;
    public string hdfACode;
    public string lblACode;
    public string lblShopName;
    public string lblInvoiceDate;
    public bool hdfInvoicecheck;

    //input

    public int alllist;
    public int allpoint;
    public int cpoint;
    public int cbpoint;
    public List<OrderEditSearchData> searchData = new List<OrderEditSearchData>();
    public List<OrderEditSearchData> searchDataPaged = new List<OrderEditSearchData>();
    Dictionary<string, int> xmdfcp = new Dictionary<string, int>();
    // Invoice Status
    public List<ListItem> ddlInvoiceStatus = new List<ListItem>();
    public string? invStatSelected;

    //LINE
    string keyword = "";
    string jsondata = "", content = "";

    protected override void OnInitialized()
    {
        bool isuser = false;
        bool ischeck = false;
        string position = "";
        try
        {
            hdfUID = Encoding.UTF8.GetString(Convert.FromBase64String(uid));
            hdfInvoiceNo = invoice_route;
            lblInvoiceNo = hdfInvoiceNo;
            hpladd_NavigateUrl = "/orderadd/" + hdfInvoiceNo + "?uid=" + uid + "&q=" + q;

            using (var db = new SHELLREGContext())
            {
                var finding = db.Users.Where(t => t.LineUid == hdfUID);
                if (finding.Any())
                {
                    var founded = finding.First();
                    position = founded.Position;
                    ischeck = founded.RegisterCheck == true;
                    hdfUserID = founded.UserId;

                    var query_ = (
                        from invh in db.InvoiceHeaders.Where(t => t.InvoiceNo == hdfInvoiceNo)
                        from trd in db.TradeOwners.Where(t => t.Acode == invh.Acode)
                        select new
                        {
                            invh.InvoiceDate,
                            invh.InvoiceStatusId,
                            trd.Acode,
                            trd.ShopName,
                        }
                    ).AsEnumerable();
                    if (query_.Any())
                    {
                        var founded_q = query_.First();
                        isuser = true;
                        hdfACode = founded_q.Acode;
                        lblACode = founded_q.Acode;
                        lblShopName = founded_q.ShopName;
                        lblInvoiceDate = founded_q.InvoiceDate;
                        string InvoiceStatus = founded_q.InvoiceStatusId.ToString();
                        int? where = 3;
                        if (InvoiceStatus == "3")
                        {
                            where = null;
                        }
                        ddlInvoiceStatus = pop.DropDownInvoiceStatus(where);
                        if (InvoiceStatus == "3" || InvoiceStatus == "4")
                        {
                            hdfInvoicecheck = true;
                        }
                    }
                }

            }

        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/error");
        }
        if (ischeck == false && position == "OBAM")
        {
            Navigation.NavigateTo("/staff?uid=" + uid + "&q=" + q);
        }
        else if (position != "OBAM" || ischeck == false || isuser == false)
        {
            Navigation.NavigateTo("/error");
        }

        Searching();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("Orderedit_DocumentReady");
        await base.OnAfterRenderAsync(firstRender);
    }
    #region FROM OrderEdit
    void Searching()
    {
        btnsavecheck_disable = true;
        var filtered = resf.GetProductInvoiceList(hdfInvoiceNo, hdfACode);
        this.SetData(filtered);
        btnsavecheck_disable = false;

        if (hdfInvoicecheck == true)
        {
            ddlInvoiceStatus_disable = true;
            btnsavecheck_disable = true;
            btnsavecheck_hide = true;
        }
    }

    void SetData(List<OrderEditSearchData> query)
    {
        this.searchData = query;
        //this.totalPage = query.Count();//(int)Math.Ceiling(query.Count() / (pageSize * 1.00));
        this.searchDataPaged = this.searchData;//this.searchData_iquery.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

        reloadDict();

    }
    void reloadDict()
    {
        xmdfcp = new Dictionary<string, int>();
        foreach (var each in searchDataPaged)
        {
            if (!xmdfcp.ContainsKey(each.ProductUnit))
            {
                xmdfcp.Add(each.ProductUnit, 0);
            }
            xmdfcp[each.ProductUnit] += each.ProductQty.Value;
        }
    }

    void GetSub(OrderEditSearchData eachitem)
    {
        if (eachitem.ProductQty > 0)
        {
            eachitem.ProductQty--;
            EditProductInvoice(eachitem.MaterialCode, eachitem.ProductQty.Value, -1);
        }
    }
    void GetLimit(OrderEditSearchData eachitem)
    {
        //qualitylimit = limit
        //qualituunit = unite
        if (eachitem.ProductQty >= eachitem.ProductQuantityLimit.Value)
        {
            eachitem.ProductQty = eachitem.ProductQuantityLimit.Value;
            this.OpenErrorDialog("ขออภัย ท่านไม่สามารถสั่งซื้อสินค้ารายการนี้ได้เกิน " + eachitem.ProductQuantityLimit + " " + eachitem.ProductUnit);
        }
        else
        {
            eachitem.ProductQty++;
            EditProductInvoice(eachitem.MaterialCode, eachitem.ProductQty.Value, 1);
        }
    }
    void RemoveProductInvoice(OrderEditSearchData eachitem)
    {
        resf.RemoveProductInvoice(hdfInvoiceNo, eachitem.MaterialCode, hdfUserID);
        Searching();
    }

    void EditProductInvoice(string matcode, int current_qty, int changed)
    {
        resf.EditProductInvoice(hdfInvoiceNo, matcode, current_qty, hdfUserID);
        reloadDict();
    }
    #endregion

    public class DataLines
    {
        public string to { get; set; }
        public string keyword_id { get; set; }
        public DataParams Params { get; set; }
    }
    public class DataParams
    {
        public string invoice { get; set; }
        public string adddate { get; set; }
        public string addtime { get; set; }
        public string status { get; set; }
    }
}


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}
@code {
    public bool ShowBackdrop = false;
}

<div class="modal @SaveModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@SaveModalDisplay">
    <div class="modal-dialog" style="margin-top:200px;">
        <div class="modal-content">
            <div class="modal-body">
                <center><h4>คุณยืนยันการบันทึกหรือไม่</h4></center>
                <div>&nbsp;</div>
                <div class="row">
                    <div class="col-xs-6"><button class="btn btn-danger btn-block btngary" @onclick="@CloseSaveModal">ไม่ใช่</button></div>
                    <div class="col-xs-6"><button id="btnSave" @onclick="btnSave_Click" class="btn btn-danger btn-block btnyellow">ใช่</button></div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    public string SaveModalDisplay = "none;";
    public string SaveModalClass = "";

    private void OpenSaveModal()
    {
        SaveModalDisplay = "block;";
        SaveModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void CloseSaveModal()
    {
        SaveModalDisplay = "none";
        SaveModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    protected void btnSave_Click()
    {
        try
        {
            using (var db = new SHELLREGContext())
            {
                var finding_inv = db.InvoiceHeaders.Where(t => t.InvoiceNo == hdfInvoiceNo);
                if (finding_inv.Any())
                {
                    var founded_inv = finding_inv.First();
                    founded_inv.InvoiceStatusId = int.Parse(invStatSelected);
                    founded_inv.EditDate = curr_date;
                    founded_inv.EditTime = curr_time;
                    founded_inv.EditUserId = hdfUserID;

                    var finding_trad = db.TradeOwners.Where(t => t.Acode == hdfACode);
                    if (finding_trad.Any())
                    {
                        var founded_trd = finding_trad.First();
                        string LineUID = founded_trd.LineUid;
                        if (LineUID != "")
                        {
                            keyword = "R-IbsQfjj";//Invoice_To_OBAM_Status
                            DataParams Params = new DataParams();
                            Params.invoice = hdfInvoiceNo;
                            Params.adddate = curr_date;
                            Params.addtime = curr_times;
                            Params.status = invStatSelected;

                            DataLines datas = new DataLines();
                            datas.to = LineUID;
                            datas.keyword_id = keyword;
                            datas.Params = Params;

                            jsondata = Newtonsoft.Json.JsonConvert.SerializeObject(datas).Replace("Params", "params");
                            try
                            {
                                content = my_clsDefault.LineDataReader(jsondata).ReadToEnd();
                                new LogSystemService().InsertLogSendLine("INVOICE EDIT", "InvoiceEditTradeOwner", LineUID, jsondata, content);
                            }
                            catch (Exception)
                            {
                                new LogSystemService().InsertLogSendLine("ERROR INVOICE EDIT", "InvoiceEditTradeOwner", LineUID, jsondata, "");
                            }
                        }
                    }
                }
                else
                {
                    OpenErrorDialog(string.Format("ไม่พบข้อมูล InvoiceHeaders.InvoiceNo {0}", hdfInvoiceNo));
                }
            }

        }
        catch (Exception ex)
        {
            OpenErrorDialog(ex.Message);
        }
    }
}






<div class="modal @DescriptionModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@DescriptionModalDisplay">
    <div class="modal-dialog" style="margin-top:70px;">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" @onclick="@CloseDescriptionModal"><span aria-hidden="true">&times;</span></button>
                <div class="row" style="margin-top:25px;">
                    <div class="col-xs-12">@((MarkupString)DescriptionModal_text)</div>
                </div>
            </div>
        </div>
    </div>
</div>

    @code {
    //Modal OPEN CLOSE CHANGEVIEW
    public string DescriptionModalDisplay = "none;";
    public string DescriptionModalClass = "";
    public string DescriptionModal_text = "";

    private void OpenDescriptionModal(string str)
    {
        DescriptionModal_text = str;
        DescriptionModalDisplay = "block;";
        DescriptionModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
    public void CloseDescriptionModal()
    {
        DescriptionModalDisplay = "none";
        DescriptionModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    }


    

<ModalDialog @ref="modal" OnClose="@OnErrorDialogClose"></ModalDialog>
    @code {

    private ModalDialog modal { get; set; }
    private void OnErrorDialogClose(bool accepted)
    {
        //StateHasChanged();
    }
    private void OpenErrorDialog(string txt)
    {
        modal.Open(txt);
        //StateHasChanged();
    }
    }
