@using OfficeOpenXml
@using Shell.Data
@using Shell.Model
@using Shell.Service
@inject IclsDefault my_clsDefault
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="modal @ModalClass" id="modalimport" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border:0;">
                <button type="button" class="close" @onclick="@ClosingMe"><span aria-hidden="true">&times;</span></button>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div id="divimport" style="display:@divimport_Display">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 rows">
                            <div class="input-group">
                                <label for="fuAttachFile" class="col-form-label">กรุณาเลือกไฟล์ข้อมูลร้านค้า</label>
                                <InputFile ID="fuAttachFile" class="form-control" OnChange="@LoadFileToVM" />
                            </div>
                            <div class="input-group text-danger">** ไฟล์ข้อมูลที่นำเข้าต้องไม่มี ( ‘ ) หากระบบตรวจพบจะดำเนินการลบอัตโนมัติ</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" ID="btnImport" @onclick=@btnImport_Click class="btn btn-success btn-block login-button">ตกลง</button></div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@ClosingMe">ยกเลิก</button></div>
                    </div>
                </div>
            </div>
            <div id="divok" style="display:@divok_Display">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 rows">
                            <div class="input-group text-center">
                                <label class="col-form-label">คุณยืนยันที่จะนำข้อมูลเข้าระบบใช่หรือไม่</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" style="border:0;">
                    <div class="row">
                        <div class="col-md-3">&nbsp;</div>
                        <div class="col-md-3"><button type="button" ID="btnImport" @onclick=@divok_OK class="btn btn-success btn-block login-button">ตกลง</button></div>
                        <div class="col-md-3"><button type="button" class="btn btn-default btn-block" @onclick="@divok_Cancel">ยกเลิก</button></div>

                    </div>
                </div>
            </div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
            <div>&nbsp;</div>
        </div>
    </div>
</div>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade in"></div>
}

@code {
    Base64 base64 = new Base64();

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    [Parameter]
    public EventCallback<bool> GoSearch { get; set; }
    [Parameter]
    public bool DivSuccessVisible { get; set; }
    [Parameter]
    public EventCallback<bool> DivSuccessVisibleChanged { get; set; }
    [Parameter]
    public bool DivErrorVisible { get; set; }
    [Parameter]
    public EventCallback<bool> DivErrorVisibleChanged { get; set; }
    [Parameter]
    public string ErrorMessage { get; set; }
    [Parameter]
    public EventCallback<string> ErrorMessageChanged { get; set; }
    [Parameter]
    public string SuccessMessage { get; set; }
    [Parameter]
    public EventCallback<string> SuccessMessageChanged { get; set; }


    [Parameter]
    public List<MasterExcelImportData> ImportDataParam { get; set; }
    [Parameter]
    public EventCallback<List<MasterExcelImportData>> ImportDataParamChanged { get; set; }

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public string divimport_Display = "block;";
    public string divok_Display = "none;";

    public int MatchFieldCount = 0;
    public long maxFileSize = 1024 * 15 * 10;
    string AttatchFolder = "upload";
    string FileExtension = ".xlsx";
    string imp = "Master";
    string current_filepath = "";
    public string current_ImportID = "";
    public List<MasterExcelImportData> tmp = new List<MasterExcelImportData>();

    public IBrowserFile browserFile;

    private Task ClosingMe()
    {
        this.CloseMyDisplay();
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    private async Task OnDivErrorVisibleChanged(bool b)
    {
        await DivErrorVisibleChanged.InvokeAsync(b);
    }
    private async Task OnDivSuccessVisibleChanged(bool b)
    {
        await DivSuccessVisibleChanged.InvokeAsync(b);
    }
    private async Task OnErrorMessageChanged(string msg)
    {
        await ErrorMessageChanged.InvokeAsync(msg);
    }
    private async Task OnSuccessMessageChanged(string msg)
    {
        await SuccessMessageChanged.InvokeAsync(msg);
    }
    private async Task OnImportDataParamChanged(List<MasterExcelImportData> msg)
    {
        await ImportDataParamChanged.InvokeAsync(msg);
    }

    protected override void OnInitialized()
    {
        using (var db = new SHELLREGContext())
        {
            MatchFieldCount = db.MatchFields.Where(t => t.FieldType == "Dealer").Count();
        }
    }

    void LoadFileToVM(InputFileChangeEventArgs e)
    {
        browserFile = e.GetMultipleFiles(1).First();
    }

    public void OpenMyDisplay()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void CloseMyDisplay()
    {
        switchView_first_import();
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    public async void ResetOutputMessage()
    {
        await OnDivSuccessVisibleChanged(false);
        await OnDivErrorVisibleChanged(false);
        await OnErrorMessageChanged("");
    }

    private async Task btnImport_Click()
    {
        ResetOutputMessage();
        current_ImportID = await GenIDFromStore();
        var usrid = await sessionStorage.GetItemAsync<string>("UserID");
        try
        {
            using (var db = new SHELLREGContext())
            {
                db.ImportControls.Add(new ImportControl()
                    {
                        ImportId = current_ImportID,
                        ImportType = imp,
                        ImportDateTime = Convert.ToDecimal(DateTime.Now.ToString("yyyyMMddHHmmss")),
                        UsrId = usrid,
                    });
                db.SaveChanges();
            }

            var task_upload = await UploadFile(current_ImportID);
            if (!task_upload)
            {
                return;
            }
            try
            {
                var let_tmp = await ReadExcel(current_ImportID);

                if (let_tmp.Count <= 0)
                {
                    var err_msg = "ไฟล์ข้อมูลของคุณไม่เป็นไปตามเงื่อนไขของระบบ กรุณาตรวจสอบอีกครั้ง";
                    await ErrorOccured(current_ImportID, "0002", err_msg);
                    return;
                }
                else
                {
                    tmp = let_tmp;
                }
            }
            catch (Exception ex)
            {
                var err_msg = "ERROR: " + ex.Message;
                await ErrorOccured(current_ImportID, "0002", err_msg);
                return;
            }
        }
        catch (Exception ex)
        {
            var err_msg = "ERROR: " + ex.Message;
            await ErrorOccured(current_ImportID, "0002", err_msg);
            return;
        }
        switchView_second_confirm();

    }

    async Task<bool> UploadFile(string ImportID)
    {
        if (browserFile != null)
        {
            string fileExt = Path.GetExtension(browserFile.Name);
            if (fileExt == FileExtension)
            {
                try
                {
                    string contentpath = my_clsDefault.ContentRootPath();
                    var mappath = Path.Combine(contentpath, AttatchFolder);

                    if (!Directory.Exists(mappath))
                    {
                        Directory.CreateDirectory(mappath);
                    }
                    var trustedFileNameForFileStorage = ImportID + fileExt;
                    current_filepath = Path.Combine(mappath,
                            trustedFileNameForFileStorage);
                    await using FileStream fs = new(current_filepath, FileMode.Create);
                    await browserFile.OpenReadStream(maxFileSize).CopyToAsync(fs);
                    return true;
                }
                catch (Exception ex)
                {
                    var err_msg = "ERROR: " + ex.Message.ToString();
                    return await ErrorOccured(ImportID, "0001", err_msg);
                }
            }
            else
            {
                var err_msg = "ERROR: กรุณาอัพโหลดไฟล์ที่มีนามสกุล .xlsx เท่านั้น!";
                return await ErrorOccured(ImportID, "0001", err_msg);
            }
        }
        else
        {
            var err_msg = "กรุณาเลือกไฟล์ .xlsx";
            return await ErrorOccured(ImportID, "0001", err_msg);
        }
    }

    public async Task<List<MasterExcelImportData>> ReadExcel(string impid)
    {
        var let_tmp = new List<MasterExcelImportData>();
        var filepath = current_filepath;
        FileInfo existingfile = new FileInfo(filepath);
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (ExcelPackage package = new ExcelPackage(existingfile))
        {
            ExcelWorksheet worksheet = package.Workbook.Worksheets.FirstOrDefault();
            var MasterImportList = ExceltoDatatable.ConvertTableToObjects<MasterExcelImportData>(worksheet.Tables.First());
            let_tmp = MasterImportList.ToList();
            return let_tmp;
        }
    }

    public async Task<bool> ErrorOccured(string ImportID, string result, string remark)
    {
        SendError(remark);
        updateResultImport(ImportID, result, remark);
        await ClosingMe();
        return false;
    }
    public async void SuccessOccured(string remark)
    {
        SendSuccess(remark);
        await OnImportDataParamChanged(tmp);
        await ClosingMe();
    }
    public async void SendError(string msg)
    {
        await OnDivSuccessVisibleChanged(false);
        await OnSuccessMessageChanged("");
        await OnDivErrorVisibleChanged(true);
        await OnErrorMessageChanged(msg);
    }
    public async void SendSuccess(string msg)
    {
        await OnDivErrorVisibleChanged(false);
        await OnErrorMessageChanged("");
        await OnDivSuccessVisibleChanged(true);
        await OnSuccessMessageChanged(msg);
    }

    protected void updateResultImport(string ImportID, string result, string remark)
    {
        try
        {
            using (var db = new SHELLREGContext())
            {
                var list = db.ImportControls.Where(t => t.ImportId == ImportID);
                if (list.Any())
                {
                    var current_row = list.First();
                    current_row.Result = result;
                    current_row.Remark = remark;
                }
                db.SaveChanges();
            };
        }
        catch (Exception ex)
        {

        }
    }

    public async Task<string> GenIDFromStore()
    {
        var DateTwoDigits = DateTime.Now.ToString("yy");
        return await my_clsDefault.GenID(DateTwoDigits);
    }

    public void divok_OK()
    {
        bool isupdate = false;
        int asql_update_and_delete = 0;
        string errorfunction = "", errorLineUID = "", errorjsondata = "";
        try
        {
            using (var db = new SHELLREGContext())
            {

                using (var dbContextTransaction = db.Database.BeginTransaction())
                {

                    try
                    {

                        var tradeowner_db = db.TradeOwners;
                        var user_db = db.Users;
                        if (tmp.Count > 0)
                        {
                            int irow = 2;
                            foreach (var each_tmp in tmp)
                            {
                                string ImportResult = "";

                                if (
                                    !string.IsNullOrWhiteSpace(each_tmp.DSMID)
                                    && !string.IsNullOrWhiteSpace(each_tmp.DSMName)
                                )
                                {
                                    bool RegisterCheck = true;
                                    bool checkdub = user_db.Where(t => t.UserId == each_tmp.DSMID).Any();//config.CheckDupID("Users", "UserID", each_tmp.DSMID);
                                    if (checkdub)
                                    {
                                        if (string.IsNullOrWhiteSpace(each_tmp.DSMLineUID))
                                        {
                                            RegisterCheck = false;
                                            ImportResult += ",Rollback DSM";
                                        }
                                        else
                                        {
                                            ImportResult += ",แก้ไข DSM";
                                        }
                                        var found_user_iquery = user_db.Where(t => t.UserId == each_tmp.DSMID);
                                        if (found_user_iquery.Any())
                                        {
                                            var found_user = found_user_iquery.First();
                                            found_user.Fullname = each_tmp.DSMName;
                                            found_user.LineUid = each_tmp.DSMLineUID;
                                            found_user.RegisterCheck = RegisterCheck;
                                        }
                                        asql_update_and_delete += 1;
                                    }
                                    else
                                    {
                                        user_db.Add(new User()
                                            {
                                                UserId = each_tmp.DSMID,
                                                Username = each_tmp.DSMID,
                                                Password = base64.base64Encode(each_tmp.DSMID),
                                                Fullname = each_tmp.DSMName,
                                                LineUid = each_tmp.DSMLineUID,
                                                Position = "DSM",
                                                Status = "active",
                                                UserUse = false,
                                            });
                                        isupdate = true;
                                        ImportResult += ",เพิ่ม DSM";
                                    }
                                }
                                else
                                {
                                    bool isdelete = true;

                                    if (string.IsNullOrWhiteSpace(each_tmp.DSMID))
                                    {
                                        isdelete = false;
                                    }
                                    var cloning_temp = each_tmp.Clone();
                                    cloning_temp.DSMID = null;
                                    var otherisEmpty = cloning_temp.GetType().GetProperties().All(x => string.IsNullOrWhiteSpace(x.GetValue(cloning_temp) as string));
                                    if (!otherisEmpty)
                                    {
                                        isdelete = false;
                                    }
                                    if (isdelete)
                                    {
                                        bool checkhave = tradeowner_db.Where(t => t.Dsmid == each_tmp.DSMID).Any();//config.CheckDupID("TradeOwner", "DSMID", DSMID);
                                        if (!checkhave)
                                        {
                                            var found_user_iquery = user_db.Where(t => t.UserId == each_tmp.DSMID);
                                            if (found_user_iquery.Any())
                                            {
                                                user_db.Remove(found_user_iquery.First());
                                            }
                                            ImportResult += ",ลบ DSM";
                                            asql_update_and_delete += 1;
                                        }
                                    }
                                }
                                if (
                                    !string.IsNullOrWhiteSpace(each_tmp.DSRID)
                                    && !string.IsNullOrWhiteSpace(each_tmp.DSRName)
                                    && !string.IsNullOrWhiteSpace(each_tmp.DSRName)
                                )
                                {
                                    bool RegisterCheck = true;
                                    bool checkdub = user_db.Where(t => t.UserId == each_tmp.DSRID).Any();//config.CheckDupID("Users", "UserID", DSRID);
                                    if (checkdub)
                                    {
                                        if (string.IsNullOrWhiteSpace(each_tmp.DSRLineUID))
                                        {
                                            RegisterCheck = false;
                                            ImportResult += ",Rollback DSR";
                                        }
                                        else
                                        {
                                            ImportResult += ",แก้ไข DSR";
                                        }
                                        var found_user_iquery = user_db.Where(t => t.UserId == each_tmp.DSRID);
                                        if (found_user_iquery.Any())
                                        {
                                            var found_user = found_user_iquery.First();
                                            found_user.Fullname = each_tmp.DSRName;
                                            found_user.LineUid = each_tmp.DSRLineUID;
                                            found_user.RegisterCheck = RegisterCheck;
                                            found_user.Phone = each_tmp.DSRPhone;
                                        }
                                        asql_update_and_delete += 1;
                                    }
                                    else
                                    {
                                        user_db.Add(new User()
                                            {
                                                UserId = each_tmp.DSRID,
                                                Username = each_tmp.DSRID,
                                                Password = base64.base64Encode(each_tmp.DSRID),
                                                Fullname = each_tmp.DSRName,
                                                LineUid = each_tmp.DSRLineUID,
                                                Position = "DSM",
                                                Status = "active",
                                                UserUse = false,
                                                Phone = each_tmp.DSRPhone
                                            });
                                        isupdate = true;
                                        ImportResult += ",เพิ่ม DSR";
                                    }
                                }
                                else
                                {
                                    bool isdelete = true;

                                    if (string.IsNullOrWhiteSpace(each_tmp.DSRID))
                                    {
                                        isdelete = false;
                                    }
                                    var cloning_temp = each_tmp.Clone();
                                    cloning_temp.DSRID = null;
                                    var otherisEmpty = cloning_temp.GetType().GetProperties().All(x => string.IsNullOrWhiteSpace(x.GetValue(cloning_temp) as string));
                                    if (!otherisEmpty)
                                    {
                                        isdelete = false;
                                    }
                                    if (isdelete)
                                    {
                                        bool checkhave = tradeowner_db.Where(t => t.Dsrid == each_tmp.DSRID).Any();//config.CheckDupID("TradeOwner", "DSRID", DSRID);
                                        if (!checkhave)
                                        {
                                            var found_user_iquery = user_db.Where(t => t.UserId == each_tmp.DSRID);
                                            if (found_user_iquery.Any())
                                            {
                                                user_db.Remove(found_user_iquery.First());
                                            }
                                            ImportResult += ",ลบ DSR";
                                            asql_update_and_delete += 1;
                                        }
                                    }
                                }
                                if (
                                    !string.IsNullOrWhiteSpace(each_tmp.OBAMID)
                                    && !string.IsNullOrWhiteSpace(each_tmp.OBAMName)
                                    && !string.IsNullOrWhiteSpace(each_tmp.OBAMPhone)
                                    && !string.IsNullOrWhiteSpace(each_tmp.OBAMEmail)
                                    )
                                {
                                    bool RegisterCheck = true;
                                    bool checkdub = user_db.Where(t => t.UserId == each_tmp.OBAMID).Any();//config.CheckDupID("Users", "UserID", OBAMID);
                                    if (checkdub)
                                    {
                                        if (string.IsNullOrWhiteSpace(each_tmp.OBAMLineUID))
                                        {
                                            RegisterCheck = false;
                                            ImportResult += ",Rollback OBAM";
                                        }
                                        else
                                        {
                                            ImportResult += ",แก้ไข OBAM";
                                        }
                                        var found_user_iquery = user_db.Where(t => t.UserId == each_tmp.OBAMID);
                                        if (found_user_iquery.Any())
                                        {
                                            var found_user = found_user_iquery.First();
                                            found_user.Fullname = each_tmp.OBAMName;
                                            found_user.LineUid = each_tmp.OBAMLineUID;
                                            found_user.RegisterCheck = RegisterCheck;
                                            found_user.Phone = each_tmp.OBAMPhone;
                                            found_user.Email = each_tmp.OBAMEmail;
                                        }
                                        asql_update_and_delete += 1;
                                    }
                                    else
                                    {
                                        user_db.Add(new User()
                                            {
                                                UserId = each_tmp.OBAMID,
                                                Username = each_tmp.OBAMID,
                                                Password = base64.base64Encode(each_tmp.OBAMID),
                                                Fullname = each_tmp.OBAMName,
                                                LineUid = each_tmp.OBAMLineUID,
                                                Position = "OBAM",
                                                Status = "active",
                                                UserUse = false,
                                                Phone = each_tmp.OBAMPhone,
                                                Email = each_tmp.OBAMEmail,
                                            });
                                        isupdate = true;
                                        ImportResult += ",เพิ่ม OBAM";
                                    }
                                }
                                else
                                {
                                    bool isdelete = true;

                                    if (string.IsNullOrWhiteSpace(each_tmp.OBAMID))
                                    {
                                        isdelete = false;
                                    }
                                    var cloning_temp = each_tmp.Clone();
                                    cloning_temp.OBAMID = null;
                                    var otherisEmpty = cloning_temp.GetType().GetProperties().All(x => string.IsNullOrWhiteSpace(x.GetValue(cloning_temp) as string));
                                    if (!otherisEmpty)
                                    {
                                        isdelete = false;
                                    }
                                    if (isdelete)
                                    {
                                        bool checkhave = tradeowner_db.Where(t => t.Obamid == each_tmp.OBAMID).Any();//config.CheckDupID("TradeOwner", "OBAMID", OBAMID);
                                        if (!checkhave)
                                        {
                                            var found_user_iquery = user_db.Where(t => t.UserId == each_tmp.OBAMID);
                                            if (found_user_iquery.Any())
                                            {
                                                user_db.Remove(found_user_iquery.First());
                                            }
                                            ImportResult += ",ลบ OBAM";
                                            asql_update_and_delete += 1;
                                        }
                                    }
                                }
                                if (!string.IsNullOrWhiteSpace(each_tmp.ACode))
                                {
                                    if (each_tmp.ACode.Length == 7)
                                    {
                                        if (
                                            !string.IsNullOrWhiteSpace(each_tmp.ACode)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ShopName)
                                            && !string.IsNullOrWhiteSpace(each_tmp.DSMID)
                                            && !string.IsNullOrWhiteSpace(each_tmp.DSMName)
                                            && !string.IsNullOrWhiteSpace(each_tmp.DSRID)
                                            && !string.IsNullOrWhiteSpace(each_tmp.DSRName)
                                            && !string.IsNullOrWhiteSpace(each_tmp.OBAMID)
                                            && !string.IsNullOrWhiteSpace(each_tmp.OBAMName)
                                            && !string.IsNullOrWhiteSpace(each_tmp.OBAMPhone)
                                            && !string.IsNullOrWhiteSpace(each_tmp.OBAMEmail)
                                            && !string.IsNullOrWhiteSpace(each_tmp.GeoRegion)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ClusterCode)
                                            && !string.IsNullOrWhiteSpace(each_tmp.SiteName)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ContactName)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ContactPhone)
                                            && !string.IsNullOrWhiteSpace(each_tmp.Site)
                                            && !string.IsNullOrWhiteSpace(each_tmp.Brand)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ShopType)
                                            && !string.IsNullOrWhiteSpace(each_tmp.CustShopType)
                                            && !string.IsNullOrWhiteSpace(each_tmp.CustSubShopType)
                                            && !string.IsNullOrWhiteSpace(each_tmp.Tier)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ShopAddress1)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ShopAddress2)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ShopPostalCode)
                                            && !string.IsNullOrWhiteSpace(each_tmp.ShopCompanyCity)
                                            && !string.IsNullOrWhiteSpace(each_tmp.StateName)
                                        )
                                        {
                                            bool RegisterCheck = true;
                                            bool checkdub = tradeowner_db.Where(t => t.Acode == each_tmp.ACode).Any();//config.CheckDupID("TradeOwner", "ACode", ACode);
                                            if (checkdub)
                                            {
                                                string status = "";
                                                if (string.IsNullOrWhiteSpace(each_tmp.LineUID))
                                                {
                                                    RegisterCheck = false;
                                                    status = ", Status = '', Agree = '0', AgreeDate = '' ";
                                                    ImportResult += ",Rollback Trade owner";
                                                }
                                                else
                                                {
                                                    if (!string.IsNullOrWhiteSpace(each_tmp.Agree) && !string.IsNullOrWhiteSpace(each_tmp.AgreeDate))
                                                    {
                                                        status = ", Agree = '" + each_tmp.Agree + "', AgreeDate = '" + each_tmp.AgreeDate + "' ";
                                                    }
                                                    ImportResult += ",แก้ไข Trade owner";
                                                }

                                                var found_tradeowner_iquery = tradeowner_db.Where(t => t.Acode == each_tmp.ACode);
                                                if (found_tradeowner_iquery.Any())
                                                {
                                                    var found_tradeowner = found_tradeowner_iquery.First();
                                                    found_tradeowner.GeoRegion = each_tmp.GeoRegion;
                                                    found_tradeowner.ClusterCode = each_tmp.ClusterCode;
                                                    found_tradeowner.SiteName = each_tmp.SiteName;
                                                    found_tradeowner.ShopName = each_tmp.ShopName;
                                                    found_tradeowner.ContactName = each_tmp.ContactName;
                                                    found_tradeowner.ContactPhone = each_tmp.ContactPhone;
                                                    found_tradeowner.LineUid = each_tmp.LineUID;
                                                    found_tradeowner.Dsmid = each_tmp.DSMID;
                                                    found_tradeowner.Dsrid = each_tmp.DSRID;
                                                    found_tradeowner.Obamid = each_tmp.OBAMID;
                                                    found_tradeowner.Site = each_tmp.Site;
                                                    found_tradeowner.Brand = each_tmp.Brand;
                                                    found_tradeowner.ShopType = each_tmp.ShopType;
                                                    found_tradeowner.CustShopType = each_tmp.CustShopType;
                                                    found_tradeowner.CustSubShopType = each_tmp.CustSubShopType;
                                                    found_tradeowner.Tier = each_tmp.Tier;
                                                    found_tradeowner.RegisterCheck = RegisterCheck;// + status;
                                                    /*found_tradeowner.UserShare = each_tmp.UserShare;
                                                    found_tradeowner.ShopAddress1 = each_tmp.ShopAddress1;
                                                    found_tradeowner.ShopAddress2 = each_tmp.ShopAddress2;
                                                    found_tradeowner.ShopPostalCode = each_tmp.ShopPostalCode;
                                                    found_tradeowner.ShopCompanyCity = each_tmp.ShopCompanyCity;
                                                    found_tradeowner.StateName = each_tmp.StateName;*/
                                                    asql_update_and_delete += 1;
                                                }
                                            }
                                            else
                                            {

                                                tradeowner_db.Add(new TradeOwner()
                                                    {
                                                        Acode = each_tmp.ACode,
                                                        GeoRegion = each_tmp.GeoRegion,
                                                        ClusterCode = each_tmp.ClusterCode,
                                                        SiteName = each_tmp.SiteName,
                                                        ShopName = each_tmp.ShopName,
                                                        ContactName = each_tmp.ContactName,
                                                        ContactPhone = each_tmp.ContactPhone,
                                                        LineUid = each_tmp.LineUID,
                                                        Dsmid = each_tmp.DSMID,
                                                        Dsrid = each_tmp.DSRID,
                                                        Obamid = each_tmp.OBAMID,
                                                        Site = each_tmp.Site,
                                                        Brand = each_tmp.Brand,
                                                        ShopType = each_tmp.ShopType,
                                                        CustShopType = each_tmp.CustShopType,
                                                        CustSubShopType = each_tmp.CustSubShopType,
                                                        Tier = each_tmp.Tier,
                                                        Status = "",
                                                        /*UserShare = each_tmp.UserShare,
                                                        ShopAddress1 = each_tmp.ShopAddress1,
                                                        ShopAddress2 = each_tmp.ShopAddress2,
                                                        ShopPostalCode = each_tmp.ShopPostalCode,
                                                        ShopCompanyCity = each_tmp.ShopCompanyCity,
                                                        StateName = each_tmp.StateName,*/
                                                    });
                                                isupdate = true;
                                                ImportResult += ",เพิ่ม Trade owner";
                                            }
                                            if (string.IsNullOrWhiteSpace(each_tmp.LineUID))
                                            {
                                                var trade_iquery = tradeowner_db.Where(t => t.Acode == each_tmp.ACode);
                                                if (trade_iquery.Any())
                                                {
                                                    var trade_lineuid = trade_iquery.First().LineUid;

                                                    string jsondata = "";
                                                    errorfunction = "ERROR TAGCLEAR";
                                                    errorLineUID = trade_lineuid;
                                                    errorjsondata = jsondata;
                                                    try
                                                    {
                                                        //string content = config.LineTagClear(datato.Rows[0]["LineUID"].ToString()).ReadToEnd();
                                                        //new LogSystem().InsertLogSendLine("TAGCLEAR", "Import", datato.Rows[0]["LineUID"].ToString(), jsondata, content);
                                                    }
                                                    catch (Exception)
                                                    {
                                                        //new LogSystem().InsertLogSendLine(errorfunction, "Import", errorLineUID, errorjsondata, "");
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                /*
                                                DataTags datatags = new DataTags();
                                                string[] tags = { each_tmp.SiteName
                                                , each_tmp.DSRID
                                                , each_tmp.ACode
                                                , each_tmp.ShopName
                                                , each_tmp.Brand
                                                    , each_tmp.ShopType
                                                    , each_tmp.CustShopType
                                                    , each_tmp.CustSubShopType
                                                    , each_tmp.Tier };
                                                    datatags.tags = tags;

                                                    string jsondata = Newtonsoft.Json.JsonConvert.SerializeObject(datatags);
                                                    errorfunction = "ERROR TAG";
                                                    errorLineUID = LineUID;
                                                    errorjsondata = jsondata;
                                                    try
                                                    {
                                                    string content = config.LineTag(jsondata, LineUID).ReadToEnd();
                                                    new LogSystem().InsertLogSendLine("TAG", "Import", LineUID, jsondata, content);
                                                    }
                                                    catch (Exception)
                                                    {
                                                    new LogSystem().InsertLogSendLine(errorfunction, "Import", errorLineUID, errorjsondata, "");
                                            }
                                            */
                                            }

                                        }
                                        else
                                        {
                                            bool isdelete = true;

                                            if (string.IsNullOrWhiteSpace(each_tmp.ACode))
                                            {
                                                isdelete = false;
                                            }
                                            var cloning_temp = each_tmp.Clone();
                                            cloning_temp.ACode = null;
                                            var otherisEmpty = cloning_temp.GetType().GetProperties().All(x => string.IsNullOrWhiteSpace(x.GetValue(cloning_temp) as string));
                                            if (!otherisEmpty)
                                            {
                                                isdelete = false;
                                            }
                                            if (isdelete)
                                            {
                                                var found_user_iquery = tradeowner_db.Where(t => t.Acode == each_tmp.ACode);
                                                if (found_user_iquery.Any())
                                                {
                                                    tradeowner_db.Remove(found_user_iquery.First());
                                                }
                                                ImportResult += ",ลบ Trade owner";
                                                asql_update_and_delete += 1;
                                            }
                                        }
                                    }
                                }

                                if (ImportResult.Length > 0)
                                {
                                    ImportResult = ImportResult.Substring(1);
                                }
                                each_tmp.ImportResult = ImportResult;
                                db.ImportLogs.Add(new ImportLog()
                                    {
                                        ImportId = current_ImportID,
                                        RowData = irow,
                                        Remark = ImportResult,
                                    });
                                asql_update_and_delete += 1;
                                irow++;
                            }
                            try
                            {
                                db.SaveChanges();
                                if (asql_update_and_delete > 0)
                                {
                                    SuccessOccured("SUCCESS: นำเข้าข้อมูลเรียบร้อยแล้ว");
                                }
                                else if (isupdate == true)
                                {
                                    SuccessOccured("SUCCESS: นำเข้าข้อมูลเรียบร้อยแล้ว");
                                }
                                else
                                {
                                    ErrorOccured(current_ImportID, "0003", "ERROR: ไม่มีรายการ");
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorOccured(current_ImportID, "0003", "ERROR: " + ex.Message);
                            }
                            /*
                                ViewState["tmp"] = tmp;
                                if (asql.Count > 0)
                                {
                                db.ExecuteNonQuery(asql, ref error);
                                    if (error == "")
                                    {
                                    divsuccess.Visible = true;
                                    divimport.Visible = true;
                                    divok.Visible = false;
                                    lblSuccess.Text = "SUCCESS: นำเข้าข้อมูลเรียบร้อยแล้ว";
                                btnSearch_Click(null, null);
                                    }
                                    else
                                    {
                                    diverror.Visible = true;
                                    lblMsg.Text = "ERROR: " + error;
                                    updateResultImport(ImportID, "0003", lblMsg.Text);
                            return;
                            }
                            }
                            else if (isupdate == true)
                                {
                                divsuccess.Visible = true;
                                divimport.Visible = true;
                                divok.Visible = false;
                                lblSuccess.Text = "SUCCESS: นำเข้าข้อมูลเรียบร้อยแล้ว";
                            btnSearch_Click(null, null);
                            }
                            else
                                {
                                diverror.Visible = true;
                                lblMsg.Text = "ERROR: ไม่มีรายการ";
                                updateResultImport(ImportID, "0003", lblMsg.Text);
                            return;
                            }
                    */
                        }
                        else
                        {
                            ErrorOccured(current_ImportID, "0003", "ERROR: ไม่มีรายการ");
                        }
                        dbContextTransaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            var err_msg = "ERROR:" + ex.Message;
            ErrorOccured(current_ImportID, "0003", err_msg);
        }
    }
    public void divok_Cancel()
    {
        switchView_first_import();
    }

    public void switchView_first_import()
    {
        divimport_Display = "block;";
        divok_Display = "none";
    }

    public void switchView_second_confirm()
    {
        divimport_Display = "none";
        divok_Display = "block;";
    }
}
